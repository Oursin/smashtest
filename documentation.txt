What is SmashTEST?
    - Store tests in a tree. Makes building, updating, and destroying tests faster.
    - Example
    - Easier to create tests as a tree, makes you think of all permutations on a single page or input.
        Represents how a tester comes up with test cases (tester thinks breadth-first, user thinks depth-first).
    - Look to "competitive advantages" section in SmashTEST Business

Setup
    - Installation
        - npm
        - Use even-numbered version of nodejs
        (?) - Install webdriverjs and/or selenium separately? See webdriverjs installation guide and try to install it as a dependency
        - https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver
        - https://www.npmjs.com/package/selenium-webdriver
        - http://www.webdriverjs.com/example-program-for-webdriverjs/

Example file
    - One big example file with each type of step, etc. and // comments explaining stuff
    - Suggested flow of putting a ~ at the end of a step, ruining browser there, coming up with all permutations on all elements on
        that page and adding those steps, repeat

Steps
    - Textual steps, packaged steps, functions
    - Each "branch" is a separate test. We call tests "branches".
    - Indents
        - 4 spaces for indents (no tabs)
        - Like indented comments on a site like Reddit, where each chain of replies is a branch
    - Blank lines generally don't matter
        - Use them for stylistic organization and to group similar steps
        - Recommended to put a blank line above and below a step block, to make it easier to see.
        - You can also use blank lines to prevent a step block from forming, since step blocks require consecutive lines
    - Modifiers are symbols that can come before or after the step. Usually after is recommended, for consistency.
    - Generally stored in smashfiles (.smash), but can be any kind of text file

Running tests
    - Basic command line invocation
        - File glob passed in
            - All files are merged into one big one, and everything at the top level is accessible to everything in other files
            - If glob omitted, *.smash is default
        - Setting {vars} from command line
        - Branches are run in order of {frequency}, high to low, where no {frequency} is med
        - Browser will run headless by default, except if you're debugging (in which case it will run normally), if it's Safari, IE, or Edge
            (which don't support headless as of yet, so they will always run normally), or if the --headless flag is passed in
    - Command line options
        - --debug=[HASH] or -d
            - Only run that branch as debugged. Ignore $'s, ~'s, groups, and frequency
        - --group=value (you can do many of these - great for group names with spaces)
        - --groups=value or "val1,val2,val3"
        - --g:varname=value or "value" (global var)
        - --headless=<true/false>
            - Overrides default headless behavior (headless unless debugging), true if true/false omitted
        - --help/-?
        - --maxInstances=5
            - 5 if omitted
        - --minFrequency=med
            - med if omitted
        - --noDebug
        - --noReport
        - --noReportServer
        - --p:varname=value or "value" (persistent var)
        - --repl or -r
        - --reportDomain=http://domain:port
            - This is where the apis will be exposed for reports to get live updates
            - Port indicates what port smashtest should run on
                - If omitted, an open port will be chosen, starting with port 9000
            - Domain indicates the domain of the machine you're running smashtest on
                - If omitted, localhost will be chosen
                - Choose a domain other than localhost for when you're running tests in CI and want people to hit the report externally
            - https currently doesn't work - if you use it it acts like http
        - --seleniumServer=http://localhost:4444/wd/hub
        - --screenshots=false (default is true)
        - --skipPassed or -s
            - Doesn't run branches that passed last time. Carries them and their state over into the new report.
                - Runs everything else (new branches/changed branches, branches that failed last time, branches that didn't run last time)
                - Doesn't run branches that have since been removed from the tree
                - Always runs the current hooks, not the hooks from the last run
            - For fixing problems in your tests that cause them to break, without having to rerun the whole entire suite again
            - Helpful for when you are typing out new tests (or updating existing ones) and only want to run whatever's new
            - Format
                - -s/-skipPassed=filename or "filename"
                    - filename of report that constitutes last run
                - -s/-skipPassed with no filename
                    - Uses latest report from <current dir>/reports that didn't have a ~ (~ reports have "debug" at the end of their filenames)
                    - If one isn't found, uses report.html in the current directory
        - --version/-v
    - Config file, config.json, in the same dir as you're running the command will set flags, but command-line flags will override
    - For CI, exits with exit code 1 if at least one branch failed, 0 otherwise. This only applies to non-REPL runs.

Reports
    - Where to find the report
        - report.html in directory where smashtest run
            - Live updates. Click a step/branch to pause live updates.
        - dates/
            - Snapshots, not live
            - _debug.html for debug runs
        - localhost:9000 (if 9000 isn't taken)
            - Live updates
            - Not recommended since this endpoint dies when smashtest ends. Use report.html instead (see console output for absolute path).
    - Pass/fail
        - Steps
            - A step passes is no errors are thrown inside of it
            - A step fails if an error is thrown inside of it
        - Branches
            - A branch will pass if all steps pass
            - A branch will fail if one or more steps fail
        - Error.continue
            - If the error obj thrown inside a step has error.continue set to true, the branch will continue executing, though it will still fail
                if there is one or more failed steps
            - If error.continue isn't set to true, the step will be marked as a fail, and the branch will be failed immediately
        - Error.fatal
            - If set, the error will bubble all the way up to the console and will end test execution immediately
        - Timeouts are set by each step on a case-by-case basis
        - Best practice: if a step fails, search the report for other instances of that step (by step text or filename:lineNumber which is hidden but searchable).
            If it always fails regardless of browser, for instance, the browser isn't the culprit.
    - Reading stack traces in errors
        - Error of step = filename and line number in filename
        - Stack trace = at CodeBlock_for_[NAME OF CODE BLOCK FUNCTION] (eval at ...), <anonymous>:[LINE NUMBER]:[COL NUMBER])
            - [LINE NUMBER] is the line in the file containing [NAME OF CODE BLOCK FUNCTION]
        - Implement complex functions in their own js files to generate more traditional stack traces
    - Sample screenshot and summary
    - What's in a name?
        The only real way to name a test is to concatenate the steps together, as tests are detailed and many of them differ by
        just one step. When you name a test, you're really just providing a crude summary of one of the steps towards the end.
        Really, naming is useless and only slows you down.

Modifiers
    - Table of modifiers and quick summaries for each

Step blocks
    - Vertical list of 2 or more steps, no blank lines in between
    - Must end in an empty line if it has children
    - Show examples
    - Each line of a step block will connect with every child step to the step block, in a separate branch. It's kind of like a for loop.
        - Give an example
    - .. at the top of a step block means sequential execution. Kind of like if we indented every step into a tree.
        - .. must be at the same indentation as vertical list
        - Function in the list with multiple branches will cause the list to branch (give example - like the one in the Hooks section below)
    - Code block ok but only if it's last member
        - Example: Debug pattern
            Step to debug

                becomes

            ..
            Step to debug
            Debug {
                console.log("something")
            }

Textual steps (-)
    - A textual step can be like a heading, describing the following steps until a new textual step occurs.
        Use functions to show multiple layers of headers (descriptions in varying degrees of specificity).
        Recommended to put the - before the step for these (looks like a heading in the report)
    - Textual steps can also be comments you want to appear at a certain point in the report.
        Recommended to use - after the step for these.
    - Also -s

UI Testing
    - Open Chrome/Open Firefox/Open Safari/Open IE/Open Edge
        - Open browser 'browser name'
        - All steps below only exist in the context of Open browser
    - Mobile/Tablet/Laptop/Desktop
        - Sets width and height of browser
        - Include full list from device.smash
    - Devices
        - Emulates device on Chrome. With other browsers, the browser size will be set to that of the device, but that's it.
        - Include full list from device.smash
    - Print [EF] or just [EF]
        - Prints found elements to browser's console and number of elements found to regular console
    - Code
        - TODO
        - JS functions available as part of built-in packages
        - execInBrowser()
        - Timeout code
        - Stubbing out APIs

ElementFinders
    - Make this a part of the UI Testing section?
    - Method of finding and/or verifying elements on the page
    - Examples
        - Examples from elementfinder_sample4.txt
        - Show how a [] in a step's text can contain a one-line EF
        - Show how to set props() in a code block, how to verify via a $(``) in a code block. Also mention $$().
    - Each line contains one or more props (i.e., 'text', ord, defined prop, and/or selectors) separated by commas
        - Each item narrows the elements matched from everything on down
        - May contain // comments
        - Not recommended to put selectors or xpaths into the text of a step.
            Set a property to that selector, then use the property's name inside the step.
            You'll be thankful later when reading your code or report.
    - Searches among all iframes
    - Properties (in order of match attempt)
        - Can start with "not"
        - 'text'
            - Contained in innerText, value (including selected item in a select), placeholder, or associated label innerText
                - Containing, lower case, trimmed, and whitespace-to-single-space match
        - ord
            - 4th = take the elements currently matched and choose only the 4th one
            - You should list list this one last
        - defined property
            - Setting props
                - prop('prop name', 'EF')
                - prop('prop name', (elems, text) => array of elems that match) // the text is the string passed in
                - prop('prop name', null) // clears prop
            - Built-in properties
                - enabled|disabled|checked|unchecked|selected|focused|in focus
                - element // matches any element
                - clickable
                - page title 'title'
                - page title contains 'title'
                - page url 'url' // relative or absolute
                - page url contains 'text' // relative or absolute
                - next to 'text'
                - value 'text' // elem.value only
                - exact 'text'
                - contains 'text'
                - innerText 'text'
                - selector '.selector'
                - xpath 'xpath'
                - style 'name: val'
                - has 'selector' (matches this selector or has a child that matches)
                - position 'N' (same as ord)
        - .css.selector
            - selectorOfIframe/selectorOfIframe/selectorOfElement
    - Special
        - Keyword
            - any order|subset
            - Must be the only thing on that line
        - Counter
            - N, N-, N+, N-M
            - Must be the first item on that line, followed by an "x"
            - When omitted, implicitly 1
    - Children
        - Children elements are indented by 4 spaces
        - First non-blank line in EF string determines the baseline indentation (0) for the top parent
        - Parent element must contain each child, in that order
        - If "any order" keyword is present, children can be in any order
        - Blank lines don't matter
    - Line that starts with * = element array
        - Will match as many elements as possible not exceeding the bounds of the parent element
        - Children listed inside must be a 1 to 1 mapping to children matched by array (same order, same amount), otherwise an Error is thrown
        - If "any order" keyword is present, children can be in any order
        - If "subset" keyword is present, children can be a subset of all matched children
    - [] around an element(s) to match that element(s). Usually used for children
        Example:
            .parent, 'nearby text'
                [.child]
        - Counters have to be outside of this, e.g., 4 x [.child]
        - 'next to' prop has the advantage of being used on one-line EFs inside a step
    - Errors: Output expected object with "  -->  not found on page" on some lines
    - [EF] step prints found elements to browser's console and number of elements found to regular console
    - $() and $$()

API Testing
    - Tutorials on how to test APIs (using existing npm libraries in code blocks)
        - fetch + chai subsets?
            - https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
            - swapi.co for sample data
    - Comparer (built-in library for validating json)
        - Comparer.expect(actualObj).to.match(expectedObj)
            - Throws error if matching fails, containing whole json object prettified, with a ---> + explanation next to each line that didn't match
        - Defaults
            - Expected arrays without $-modifiers are exact match by default
                - E.g., expected [ A, B, C ] means actual must be [ A, B, C ] exactly
            - Expected objects without $-modifiers are subset matching by default
                - E.g., expected { one: 1 } will match { one: 1, two: 2 } but not { one: 3 } or { two: 2 }
                - expected { one: undefined, two: 2 } will match { one: undefined, two: 2 } or { two: 2 }
                    - To validate one: undefined is actually there, use one: { $typeof: 'undefined' }
                    - To validate one: undefined is actually not there, use { $exact: true, two: 2 }
        - Special matching objects in expectedObj (correspond to values in actualObj)
            - $typeof
                - { $typeof: "type" }
                - Makes sure corresponding value in actualObj is of this type (uses js's typeof)
                    - Exception: you can use "array" to match arrays
            - $regex
                - { $regex: /regex/ }
                - { $regex: "regex" }
                - Makes sure corresponding value in actualObj is a string that matches this regex
            - $contains
                - { $contains: "string" }
                - Makes sure corresponding value in actualObj is a string that contains this string
            - $max
                - { $max: A }
                - Makes sure corresponding value in actualObj is a number that isn't greater than this number
            - $min
                - { $min: A }
                - Makes sure corresponding value in actualObj is a number that isn't less than this number
            - $code
                - { $code: (actual) => { return actual.toLowerCase() == 'something'; } }
                - { $code: "return actual.toLowerCase() == 'something'"}
                - { $code: "actual.toLowerCase() == 'something'"}
                - Makes sure corresponding value in actualObj causes this code to evaluate to true or return true
            - $length
                - { $length: A }
                - Makes sure corresponding value in actualObj is an array, string, or object (with a length property set) whose length is A
            - $maxLength
                - { $maxLength: A }
                - Makes sure corresponding value in actualObj is an array, string, or object (with a length property set) whose length isn't greater than A
            - $minLength
                - { $minLength: A }
                - Makes sure corresponding value in actualObj is an array, string, or object (with a length property set) whose length isn't less than A
            - $exact
                - { $exact: true, a: A, b: B }
                - Makes sure corresponding value in actualObj is an object that matches exactly (every expected key exists and has the expected value, and no other keys exist)
                - E.g., { $exact: true, one: 1 } will match { one: 1 } but not { one: 1, two: 2 } or { one: 3 } or { two: 2 }
            - $every
                - { $every: A }
                - Makes sure corresponding value in actualObj is an array where every item matches A
                - E.g., { $every: A } would match [ A, A, A ], and { $every, { $contains: "foo" } } would match [ "foobar", "barfoo", "foo" ]
            - $subset
                - [ "$subset", A, B, C ]
                - Makes sure corresponding value in actualObj is an array that contains A, B, and C in any order (and it could have more items)
            - $anyOrder
                - [ "$anyOrder", A, B, C ]
                - Makes sure corresponding value in actualObj is an array that contains A, B, and C (and nothing else) in any order
                - You can use $subset and $anyOrder together such as [ "$subset", "$anyOrder", A, B, C ] to match an array containing A, B, and C (and potentially more items) in any order
            - You can have multiple criteria in the same object
                - E.g., { $typeof: "string", $length: 10, $regex: /[A-Z]+/ } or [ "$subset", "$anyOrder", A, B, C ]
            - When expected is an object, you can include both keys to match and $-keys in expected
    - Examples
        GET '/something/one?{{adults:}}{{children:}}'
        GET '/something/two?{{adults:}}{{children:}}'

            {{adults}}='adults={{num adults:}}'
                {{children}}='children={{num children:}}'

                    {{num adults}}='0'
                    {{num adults}}='1'
                    {{num adults}}='2'

                        {{num children}}='0'
                        {{num children}}='1'
                        {{num children}}='2'

                            Verify something

            {{adults}}=''
                {{children}}='children={{num children:}}'

                    Verify something

            {{children}}=''
                {{adults}}='adults={{num adults:}}'

                    Verify something

Functions
    - Calling
        - Examples of calls (include {vars}, {{vars}}, 'strings', "strings", [strings], and vars inside of strings)
        - Vars and strings designate parameter inputs in a function call
        - Function {{var}} here OR Function "6" here OR Function ['element' finder] here maps to * Function {{other var}} here
            - All function inputs are either {vars}, {{vars}}, 'strings', "strings", or [strings]
            - {{vars}} in a function declaration must all be {{local}}, not {global}
        - Finds closest matching function declaration in the tree (always looking top to bottom among siblings), otherwise looks to packaged functions
        - When a *function ends in multiple leaves, those are separate branches for the indented line below function call
            - Show example
    - Declaring
        - Examples of declarations
            - * Public function declaration
            - ** Private function declaration
            - *** Hook declaration
        - {{local vars}} designate parameters in a function declaration
        - Finding declaration
            - First look to siblings, then to siblings of parent, etc.
            - Match custom functions first, then primitive packaged functions
            - Don't forget about functions declared within function F. A call to F makes the functions accessible to its children
                - Functions and {vars} declared inside a function are accessible to children of the caller step
    - Functions are case insensitive, leading and trailing whitespace is ignored, and whitespace in the middle is always treated as a single space
    - When * F has a call to F inside it, that call will find the closest * F, but not the parent * F.
        - Prevents infinite loops and allows a specific function to call a more generic one
        - For example, declare a * Navigate to intercept Navigate children, do something like logging or security checks, then
            call Navigate to pass control to the generic * Navigate
            * Navigate to {{url}}
                Security checks
                    Navigate to {{url}} // call to the generic one
    - Function declaration that ends in * matches any function call that starts with that declaration (extra text at end is ok)
        - If you call F * from inside * F *, it will use the function call text that originally matched * F *
            For example:
                * Security test each verify
                    * Verify *
                        Do security test
                            Verify *

                Security test each verify
                    Verify 'link' is visible // this will expand to Do security test, followed by Verify 'link' is visible

    - Examples (maybe distribute these among the sections above)
        - Using functions to encapsulate common steps
        - Using functions to enumerate branches (like a step block but with multiple levels, or the whole {x}=F thing)
        - Using functions to organize testing (have a high-level tree that describes your app, where each leaf is a function call to a function with multiple branches, where all the testing for that specific component occurs)
        - Use this function in a test, and it will automatically split into two branches, each of which tests a different way to get to the same place
            * Select beans and rice
                Variant 1 - ..
                    Click Beans
                    Click Rice

                Variant 2 - ..
                    Click Rice
                    Click Beans

                (Also useful for "Get to page X", where you can either click a link or enter a url)
                (Also useful for "Select option X", and doing it via keyboard and mouse, or a combination of both -
                    great for accessibility testing)
        - On Page X pattern, with verifications and setting global vars to selectors in a .. step block
        - Setting context pattern
            - Open browser X will establish Click, etc. as browser-oriented functions. But a future call
                to something like Open phone (whose function declaration has its own declarations for Click, etc.) sets the
                "context" to the phone, sending further child steps to the phone's functions
            - Viewport-based function implementations
                - Simple

                    * Mobile
                        * Logout
                            // steps to logout

                    * Desktop
                        * Logout
                            // different steps to logout

                    Mobile
                    Desktop

                        Logout // calls the one corresponding to mobile or desktop

                - More complex, using both viewport and page and calling original

                    * Mobile

                        * On page X

                            * Logout
                                // steps to logout

                            On page X    // calls original

                        Mobile    // calls original

                    * Desktop

                        * On page X

                            * Logout
                                // different steps to logout

                            On page X

                        Desktop

                    * On page X
                        // other funcs related to page X

                        On generic page

                    Mobile
                    Desktop

                        On page X    // calls the one corresponding to mobile or desktop

                            Logout   // calls the one corresponding to mobile or desktop

            - Request and verify

                Insert '6' adults and '1' children
                Insert '7' adults and '2' children
                Insert '8' adults and '3' children

                    Verify response

                * Insert {adults} adults and {children} children {
                    post(`${host}/calls/insert/${param}`, {
                        headers: {},
                        body: {
                            adults: adults,
                            children: children
                        }
                    });
                }

                    * Verify response {
                        response.verify({
                            status: 200,
                            headers: {},
                            body: {
                                result: 'ok',
                                num: adults + children
                            }
                        });
                    }

        - Inheritance pattern

            * On special cart page
                On cart page
                    Validate special cart stuff // this has to come last

                    * Clear cart // function that overrides a generic cart function
                        Specific stuff
                            Clear cart // call to that generic cart function

            * On cart page
                * Clear cart
                    Generic stuff

            On special cart page
                Clear cart // specific stuff, then generic stuff

        - Must test pattern (ensures that all permutations are implemented)

            Chrome
            FF
            IE

                Desktop
                Tablet
                Mobile

                    Verify

            * Chrome
                * Desktop
                    * Verify
                        A
                * Tablet
                    * Verify
                        B
                * Mobile
                    * Verify
                        C
            * FF
                * Desktop
                    * Verify
                        D
                * Tablet
                    * Verify
                        E
                * Mobile
                    * Verify
                        F
            * IE
                * Desktop
                    * Verify
                        G
                * Tablet
                    * Verify
                        H
                * Mobile
                    * Verify
                        I

        - Function acting as an anonymous step block

            * *
                A1
                    A2
                B1
                    B2
            *
                Step applied to each leaf

            * ===
                A1
                    A2
                B1
                    B2
            ===
                Step applied to each leaf

            - But make sure only one * or = pair at this indent level, otherwise the first one will always be called.
                Use more *'s, ='s, or give it a traditional name.
    - Pitfalls
        - Since strings and vars designate inputs, always use \', \", \[, \] when using those actual characters inside a step's text or in a string, to prevent a parameter from forming

Variables
    - Types of vars
        - {var} is global
            - Exists for the life of the branch
            - Steps below where {var} is declared will have access to {var}, which includes inside function calls
            - If {var} is declared inside a function, it will be accessible in the caller after the function call step
            - Accessible within Every Branch/Step hooks, for hooks that apply to branches where the var was declared
            - Recommended to give global vars long, descriptive, specific names so they're easier to read/understand and to avoid unintentional collisions
        - {{var}} is local (internal to the function)
            - Goes out of scope at the end of the function and is not accessible within function calls inside the function declaration
            - A local var is accessible inside the code block of a non-function-call step ( Text {code block} )
            - Use local whenever possible, to prevent collisions
        - Persistent vars also exist, but are only accessible in code blocks. They persist from branch to branch, for the lifetime of the whole run.
            You shouldn't normally have to use these in your day-to-day testing. Only for advanced, internal stuff.
    - Where to use them (they are replaced with their value)
        - Function call
            F {var1} {{var2}}
        - String literal
            'string literal {var1}', "string literal {{var2}}", or [string literal {var3}]
    - Setting vars
        - {var} = 'String' (or "String" or [String])
            - Everything in SmashTEST is a string (to make things less complicated, and since in most web ui/api testing you're dealing with strings anyway)
            - To clone a var, use {var}='{var2}'
            - {var1}='str1', {var2}='str2', etc.
                - When setting multiple vars in a single line, use commas to separate them. Strings only. No functions.
        - {var} = Function with a code block
            - Code Function returns a string (actually any kind of js value will work)
            - Could be {var} = Text { code block that returns something }
        - {var} = Function with branches
            - Each line must be {x}='value' (or "value" or [value])
                - No children
            - Separate branches will be created, each setting {var} to each 'value' encountered to the right of {x}
            - You can name {x} whatever you want, but the convention is {x}
    - Lookahead (:)
        - {var:} will look for the value of the variable when it's set later in the branch
        - Allows you to refactor common steps higher up into the tree. Provide an example with different {usernames}.
        - You cannot set a lookahead var inside a function's code block (via var=something or g()/l()). Must be {var}='value'.
        - If you have a {var:} and {var}=Function with code block, the code block must be sync
        - Examples
            Enter {{text:}} into [ 'Login' box ]

                {{text}}='Valid username 1'
                {{text}}='Valid username 2'
                {{text}}='Valid username 3'

                    Verify success message

                {{text}}='User that doesn't exist in db'
                {{text}}='Username that's too long'
                {{text}}='Username with invalid chars'
                {{text}}=''

                    Verify error message

            Select {{adults:}} and {{children:}} from reservations panel

                {{adults}}='[none]'
                {{adults}}='0'

                    {{children}}='[none]'
                    {{children}}='0'
                    {{children}}='1'
                    {{children}}='8'

                        Verify error

                {{adults}}='1'
                {{adults}}='8'

                    {{children}}='[none]'
                    {{children}}='0'
                    {{children}}='1'
                    {{children}}='8'

                        Verify {{something}}

            Select {{adults:}} and {{children:}} from reservations panel
                Table
                    Verify {{something}}

                * Table

                    {{adults}}='0'
                    {{adults}}='1'
                    {{adults}}='8'

                        {{children}}='0'
                        {{children}}='1'
                        {{children}}='8'

    - Variables are case insensitive, leading and trailing whitespace is ignored, and whitespace in the middle is always treated as a single space
        - Case sensitive as js vars and in persistent/global/local though (use the case that was used when declared - though leading and trailing whitespace is ignored too)
    - Pitfalls
        - Cannot have a \ in the name of a variable
        - Right now, \0, \x, \u, and \c sequences cannot be escaped in a string literal
            - To use on in a string, do
                {var} = Func {
                    return "\u2665 \cJ";
                }

Code blocks
    - Types
        - * Function {code}
        - Textual step {code} or Textual step - {code}
    - Code blocks end on a line that starts with '}' and is the exact number of indents as the step that started the code block
        - Captures code in between "Text {" and the } line (not including anything on the } line)
    - +, .., etc. modifiers come after the step text and before the {
    - Variables
        - Get
            - {{var1}} is var1 or l("var1") or getLocal("var1")
            - {var2} is var2 or g("var2") or getGlobal("var2")
            - persistent vars persist from branch to branch, for the life of the whole test run and are only accessible via p("var3") or getPersistent("var3")
            - More on js vars
                - When persistent, global, and local vars share the same name, the js var will be set according to this precedence: local, global, persistent
                - Vars whose names have anything but [A-Za-z0-9\-\_\.] won't be converted to js vars
                - Vars whose names are a reserved js keyword won't be converted to js vars
                - Vars are set for both the original case of a variable and all lowercase
                - Be mindful of these things when using vars and when setting new vars using let.
                    - When in doubt, use l()/g()/p() to get/set
        - Set
            - {{var1}} is l("var1", "value") or setLocal("var1", "value") (NOTE: you can't set var1=value as this will not persist past the end of the code block)
            - {var2} is g("var2", "value") or setGlobal("var2", "value")
            - persistent vars: p("var3", "value") or setPersistent("var3", "value")
    - JS functions and variables available
        - l(), g(), p()
        - getLocal(), getGlobal(), getPersistent()
        - setLocal(), setGlobal(), setPersistent()
        - getStepText() - great for when matching first part only
        - log(string)
        - i(varName, packageName) or i(packageName) - sets persistent var varName and returns the object
            - If only packageName passed in, generates it by camel casing packageName, e.g., one-two-three --> oneTwoThree
            - Usage: let chai = i('chai');
        - c() - same as console.log(), but prints it out more neatly (and clear of the progress bar)
        - runInstance object (quick summary)
            - runInstance.currStep
            - runInstance.currBranch
            - runInstance.tree
            - Can be used to dynamically edit or create tests at runtime
        - runInstance.runner Object (quick summary)
        - throw new Error("error msg")
    - JS file pattern
        - Discuss putting complex code into its own js file, and doing this in a code block: {
            let yf = i('yf', './yourfile.js');
            yf.something();
        }
            - Helps a lot with stack traces. Code blocks are recommended for short snippets of code, 1-5 lines long.
    - Pitfalls
        - Don't have multiple local, global, or persistent variables that are spelled the same, only different casing. Variable names are stored case-insensitively.
        - Don't use a var in a js code block that's set in a later step. That trick only works for {vars} that are used and set outside of code blocks.
        - Don't set a variable by using varname= when you want that value to persist beyond the end of the code block. Use setter functions (i.e., l(), g(), p()) instead.

Sequential execution (..)
    - .. at the end of a step
        - .. means execute branches at and below me depth-first sequentially
            - The steps at and below a .. are expanded normally, then executed sequentially
            - ..'es have the effect of flattening themselves and their children into one long list of sequentially indented steps
        - Give examples

            Something - ..
                One -
                    Two -
                    Three -
                Four -
                    Five -

                is

                1) Something
                2) One
                 etc.

            Test the editbox without navigating off the page ..

                Enter bad value 1
                Enter bad value 2
                Enter bad value 3

                    Verify error

        - a .. inside a *Function declaration does not expand beyond the bounds of that *Function declaration
        - If a function call is at or below the .. line, and it has multiple branches inside, the multiple branches will
            be combined sequentially.
            - Give an example

                Test the editbox without navigating off the page ..
                    Enter bad values
                        Verify error

                    * Enter bad values
                        Enter bad value 1
                        Enter bad value 2
                        Enter bad value 3

    - .. above a step block
        - Acts differently from the .. that comes at the end of a line
        - Only applies to the step block, not to the step block's children
        - If step block contains a function with multiple branches, the multiple branches won't be combined sequentially as with the
            .. at the end of a step. Rather, multiple branches will be generated.
            - Give an example
                ..
                Add item to cart
                Go to cart page
                Verify something on cart

                * Go to cart page  // Two different ways of getting to the cart
                    Navigate to '/cart'

                    Click {cart button in header}

    - Show more examples from bottom of test_language_sample.txt

No parallel execution (!)
    - No two child branches may execute simultaneously

Comments
    - // only, stuff before it is a legit step
    - If whole line starts with //, it's ignored as if it weren't there
        - For example
            A
            // B
            C
                is still a step block, with members A and C

Skipping (-, -s, .s, $s)
    - Skip one step
        - -      = don't run me, do run below, don't expand me, outputted to report as passing textual step
        - -s     = don't run me, do run below, don't expand me, outputted to report as gray skipped step
        - //     = don't run me, do run below, don't expand me, not outputted to report, might need to dedent lines below
    - Skip one step and all steps below
        - .s     = don't run me, don't run below, expand me and below, outputted to report as skipped
            - expand = replace function calls with corresponding function declarations, error if a function declaration isn't found
            - Marks this and all steps below as skipped. Skips entire branches that are identical to this one.
            - Be careful, when .s is in a function declaration it will affect steps after the function call as well
        - // on a step and all steps under it
            - Good if you don't want functions to expand (e.g., you have too many branches that you don't want showing up in the report,
                or you have functions whose declarations can't be found yet)
            - Won't remind you in the report that steps are being skipped
        - // on a step that's a member of a step block
            - Won't remind you in the report that steps are being skipped
    - Skip all branches passing through a step
        - $s     = don't run entire branch, expand me and below, outputted to report as skipped
            - Will mark as skipped entire branches in report

Collapsing (+, +?)
    - Collapsed (+)
        - Put on function calls or function declarations
        - Used to hide excess steps inside functions by collapsing them
        - If there's an error inside that function, or if the function is currently running, it will be uncollapsed by default
        - Like a "given" marker (marks preconditions the details of which are not a central part of the test)
    - Hidden (+?)
        - Only hidden in report if they pass
        - Good for internal stuff

Only ($)
    - $ = Only run branches under this step, but no debugging.
        - Show example. Comes at the beginning or end of the step, including before a function declaration's *.
            - Beginning is recommended, so you can easily see which lines are $'ed
        - Multiple $'s with the same parent (on the same indent level) only run branches that fall under one of these branches (OR)
        - You can put $'s at different levels to isolate a branch or branches
        - Give more examples

Debug (~)
    - Debug modifier (~)
        - Show example. Comes before or after a step, including before a function declaration's *.
        - Before means pause right before this step executes, after means pause right after
    - Isolates a single branch and pauses right before the step marked ~ and opens up the REPL
    - Pauses right after a step if it fails
    - Use multiple $'s and ~'s to isolate a single branch to debug (or you can use multiple ~'s)

REPL
    - What REPL does, show screenshot and a one sentence description
    - Starting REPL
        - --repl or -r
            - No filenames - kicks off blank browser and REPL
            - Filenames - it will load the first branch but open up repl before first step begins
        - ~ in test file
    - REPL commands
        - Enter key, s, p, r, x
        - Enter a step to run it
            - One line only
            - Multiple lines only if step has a code block
                - End the code block by entering a }
            - No function declarations
        - Ctrl + C to exit
        - Other options
            .break    Sometimes you get stuck, this gets you out
            .clear    Break, and also clear the local context
            .editor   Enter editor mode
            .exit     Exit the repl
            .help     Print this help message
            .load     Load JS from a file into the REPL session
            .save     Save all evaluated commands in this REPL session to a file

Selective test running
    - Only modifier ($)
    - Groups
        - Choosing which groups to run from variable, or from command line
        - When multiple group vars are set in a branch, the branch belongs to all groups
    - Frequency
        - Choosing which frequencies to run from {frequency}='high/med/low', or from command line
            - You can choose to run tests from a frequency, and above
            - Recommendations = high = most important tests (BVT), med = normal tests, low = all long-term tests (e.g., security tests)
        - The value of {frequency} at the leaf is what controls the frequency of that branch
        - Branches are also run in order of frequency, from high to low, where no frequency is med
        - Recommended to sort the children of a step by their frequency
    - When noDebug command line flag is set, a ~ or $ anywhere in your tree will cause an error
        - Great for making sure you're not debug prior to committing test files to CI

CI/CD Integration
    - Exit codes 0 and 1
    - -reportDomain

Hooks (***)
    - Piece of code that runs at certain points. Not for testing. For internal stuff, like reporting, requires,
        js function declarations, screenshotting, logging, etc.
    - *** Before Every Branch
        - runs before every branch that goes through this function declaration's parent
    - *** After Every Branch
        - runs after every leaf under this function declaration's parent
    - *** Before Every Step
    - *** After Every Step
        - Examples
            - Taking a screenshot
    - *** Before Everything
        - before any branches begin, execute this
        - only valid at 0 indents
        - applies to all branches from all files you put in your glob
        - Examples
            - setInterval() that runs in the background and checks for a popup (check more often than a step's normal timeout), then closes it
            - require() in a library (figure out how to do this)
    - *** After Everything
        - after all branches end, execute this
        - only valid at 0 indents
        - applies to all branches from all files you put in your glob
        - When smashtest app is being closed via Ctrl + C, After Everything code blocks will be exected synchronously, as there
            is not enough time before the process exists. If you have async code, check the isSync js variable beforehand to see if
            the code block is being executed sync.
    - Code blocks only. They cannot have children.
    - You're not allowed to have any modifiers (~, $, .., .s, etc.) on them
    - Hooks won't have a pass/fail state. If a hook fails, the step/branch it corresponds to will take the error.
    - Setting runInstance.currStep.htmlReport (for right pane)
    - These are recommended for internal framework stuff, like reporting (so you can run this code whether or not the step failed)
        - Setup/teardown too, though that should really be part of the test itself
            i.e.,
            My Test -
                ..
                Setup (teardown should really be here, so each test has a clean slate)
                Steps
                Teardown

            * Setup
                A (includes the same login as teardown, to clear out old state)

            * Steps
                B
                    C
                D

            * Teardown
                E

Packages
    - Distribute js file as npm package, and distribute static function text (as shown below).
        You can have users copy and paste off a site or download a file:

        * My function {
            require('mypackage').myFunction(); // or use i()
        }

    - Just create a file with a *** Before Everything that injects what it needs. Then just distribute this file and have users
        put it into packages/
    - Give some examples
        - Show injection being made into Runner.persistent.packageName
