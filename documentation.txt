What is SmashGEN?
    - Auto-generates functional, load, and security tests from a test tree
    - Example
    - Easier to create tests as a tree, makes you think of all permutations on a single page or input.
        Represents how a tester comes up with test cases (tester thinks breadth-first, user thinks depth-first).

Setup
    - Installation
        - npm
        - Use even-numbered version of nodejs
        (?) - Install webdriverio or selenium separately? See webdriverio installation guide and try to install it as a dependency
    - Installing SmashPANEL Lite too
        - What it does and why it's recommended

Steps
    - 4 spaces for indents (no tabs)
    - Textual steps, built-in steps, functions
    - Like indented comments on a site like Reddit, where each chain of replies is a branch

Running tests
    - Branches generated breath first
    - Basic command line invocation
        - File glob passed in
        - Setting {vars} from command line
    - js is generated, passed to webdriverio

Configuration
    - Timeouts
    - Max browser instances

Output
    - Console
    - Report
        - Test failures

Step reference
    - Browsers, Webdriver steps, Verify, Wait, etc.
    - Mocking APIs (it has its own section too)
    - Execute in browser {}

Step blocks

ElementFinders

Functions (*)
    - * has to be the first thing after the step text in a function call

Variables
    - You cannot set a var to a js object or array literal (it will screw up our regexes)
    - In a line that's {var1}=Step1, {var2}=Step2, do not accept Functions* in Step1/2/etc.
        - (In other words, if there are multiple vars being set, each Step must be a string literal)
    - Cannot have a \ in the name of a variable

Comments

Code functions

To Do (-TODO)
    - -TODO

Debug and REPL (~)
    - ~ (debug identifier)
    - ~~ (step-by-step debug identifier)
    - Using REPL
    - Kicking off blank browser and REPL just from the command line

No parallel execution (+)
    - +

Sequential execution (..)
    - ..

Expected failure (#)
    - #
    - Recommended to put a comment after the #, linking to a bug tracker ticket, etc.

Must Test

Hook steps
    - * After every X, etc.

Mocking APIs

Selective test running
    - Groups
        - Choosing which groups to run from variable, or from command line
    - Frequency
        - Choosing which frequencies to run from variable, or from command line

Run tests that failed last time

Manual tests (-MANUAL)
     - -MANUAL
