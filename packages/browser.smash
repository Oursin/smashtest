// ***************************************
//  Hooks
// ***************************************

*** After Everything {
    if(typeof Browser != 'undefined') {
        await Browser.killAllBrowsers(runInstance.runner);
    }
}

// ***************************************
//  Open browsers
// ***************************************

* Open Chrome {
    g('browser name', 'chrome');
}
    Use browser

* Open Firefox {
    g('browser name', 'firefox');
}
    Use browser

* Open Safari {
    g('browser name', 'safari');
}
    Use browser

* Open IE {
    g('browser name', 'internet explorer');
}
    Use browser

* Open Edge {
    g('browser name', 'MicrosoftEdge');
}
    Use browser

* Use browser {{name}} {
    g('browser name', name);
}
    Use browser

// ***************************************
//  Browser-dependent functions
// ***************************************

// Note: functions under Use browser are indented because they're only available after a Use browser call

* Use browser {
    let Browser = i('./packages/js/browser.js', 'Browser');
    let browser = g('browser', new Browser(runInstance));

    let name = g('browser name');
    if(name) {
        await browser.open(name);
    }

    g('$', browser.element);
}

    // ***************************************
    //  Hooks
    // ***************************************

    *** After Every Branch {
        await browser.close();
    }

    *** Before Every Step {
        // Take screenshot


    }

    *** After Every Step {
        // Take screenshot

        /*
            After Every Step sets step.htmlReport to the report html for this step.
            This is the logging and screenshots that go under the step's name in the report.
        */
    }

    // ***************************************
    //  Viewports
    // ***************************************

    * Desktop
        {browser width}='1920', {browser height}='1080'

    * Tablet
        Tablet Portrait

    * Tablet Portrait
        {browser width}='768', {browser height}='1024'

    * Tablet Landscape
        {browser width}='1024', {browser height}='768'

    * Mobile
        Mobile Portrait

    * Mobile Portrait
        {browser width}='375', {browser height}='667'

    * Mobile Landscape
        {browser width}='667', {browser height}='375'

    * Set dimensions to width={{x}} height={{y}} {

    }

    * Maximize window {

    }

    // ***************************************
    //  Actions
    // ***************************************

    * Navigate to {{url}} {
        browser.nav(url);
    }

    * Click {{element}} {
        // element is selector string or ElementFinder
    }

    * Double click {{element}} {

    }

    * Hover over {{element}} {

    }

    * Touch {{element}} {

    }

    * Scroll to {{element}} {

    }

    * Get cookie {{name}} {

    }

    * Set cookie {{name}} to {{value}} {
        // value can include expiration, etc.
    }

    * Delete cookie {{name}} {

    }

    * Delete all cookies {

    }

    * Clear local storage {

    }

    * Clear cache and cookies {
        // including local storage
    }

    * Go Back {

    }

    * Go Forward {

    }

    * Refresh {

    }

    * Type {{text}} into {{element}} {
        // sendkeys, you can also use unicode codes for special keys like arrows (represented as "[enter]", etc.)
        /*
        - Enter '[nothing]', Select '[nothing]', etc. just does nothing, without an error
            - This allows you to Enter, Select, etc. a variable, that can sometimes be set to [nothing] to signify ignoring this form field
            - Make sure you can escape using \[nothing\]. Same thing with keys like [enter].
        */
    }

    * Set {{element}} to {{value}} {
        // can be textbox, dropdown, etc. (anything with a value)
        // support [nothing]
    }

    * Check {{element}} {
        // checkboxes or radio
    }

    * Uncheck {{element}} {
        // checkboxes or radio
    }

    * Select {{value}} from {{element}} {
        // dropdown, where value is exact text, or nearest text with a warning logged (via log())
        // support [nothing]
    }

    * Current url {
        // return current absolute url
    }

    * Window title {
        // returns window title
    }

    * Value of {{element}} {
        // returns value of element
    }

    * New tab {

    }

    * Switch to tab with title {{text}} {
        // window title contains given text
    }

    * Switch to tab with url {{url}} {
        // search for full url, then do partial matches
    }

    * Switch to the {{nth}} tab {
        // nth in an actual ordinal (strip out the number from this string)
    }

    * Switch to iframe {{element}} {
        // element is a selector or ElementFinder of an iframe
    }

    * Switch to original iframe {
        // parentFrame aka defaultContent
    }

    * Wait {{n}} seconds {
        // webdriver has a function for this
    }

    // ***************************************
    //  Verify
    // ***************************************

    // TODO:
    // Set error.continue = true for these steps
    // All of these steps will verify immediately and fail immediately

    * Verify at page {{page}} {
        // page is page title or url (absolute or relative)
        // do a partial match
    }

    * Verify cookie {{name}} contains {{value}} {

    }

    * Verify {{elementOrText}} comes next {
        // Verify {{element}} contains {{elementOrText}} sets a pointer the element that was matched
        // This validates that the given element or text comes after that element in the DOM
        // Makes it much easier to verify a whole page in a particular order
    }

    * Verify {{element}} * {

        /*
            Verify
            (<empty>|that)
            (
               <empty>
               |at most N|at least N|more than N|less than N|exactly N|
               |at most N of|at least N of|more than N of|less than N of|exactly N of|
               |every
            )
            (ElementFinder|Selector|Text)
            (
               is|is not|isn't|
               are|are not|aren't|
               has|has not|hasn't|
               contains|does not contain|doesn't contain|
               contain|do not contain|don't contain|
               exactly contains|does not exactly contain|doesn't exactly contain|
               exactly contain|do not exactly contain|don't exactly contain|
               comes before|comes after|
               come before|come after
            )
            (
               visible|enabled|disabled|checked|unchecked|selected|focused|in focus|focus
               ElementFinder|Selector|Text
            )





            Verify ['Login' box] ..
                -> comes after 'something'
                -> contains 'all the right stuff'

                or

                it comes after 'something'
                it contains 'all the right stuff'


            Verify (ElementFinder|Selector|Text) ..
                -><stuff above, after (ElementFinder|Selector|Text)>
                -><etc.>

                it <stuff above, after (ElementFinder|Selector|Text)>
                it <etc.>

                Implement * -> * / * it * right under this function
                sets runInstance.context = element, and acts on the variable

                A Verify step with only Verify X will check that runInstance.currStep.isSequential, or that it only has one
                    child in the tree (either a Step or a StepBlock with isSequential set), and if not will throw a runtime Error

                The top Verify step waits for 1 sec as usual, but the ->/it statements don't wait at all, and they're continue = true
        */

        // not visible = in the DOM but hidden, or not in the DOM at all

        // for contains, Text = in innerText, value, etc.
        //    Checks both inside the DOM (visible stuff) and the element's value (and similar properties)
        //    Works for checking the selected item in a dropdown too

        // exactly contains = text only

        // don't forget to log "Function parameter..." for params that come after the *

        /*
        Another idea:

            The {{element}} ..  // The {{element}} merely sets the global {it} to the element
                Verify {it} is 'red'
                Verify {it} contains 'milk'
                Click {it}
        */

    }

    // ***************************************
    //  Wait until
    // ***************************************

    * Wait until {{element}} * {

    }

    // Same as for Verify, with optional (for up to N (secs|sec|s)|up to N (secs|sec|s)) at the end

    // ***************************************
    //  Misc
    // ***************************************

    * Log {{text}} {
        log(runInstance.replaceVars(text);
    }
