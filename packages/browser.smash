// ***************************************
//  Hooks
// ***************************************

*** After Everything {
    if(typeof Browser != 'undefined') {
        await Browser.killAllBrowsers(runInstance.runner);
    }
}

// ***************************************
//  Open browsers
// ***************************************

* Open Chrome
    {browser name}='chrome' .?
        Use browser .?

* Open Firefox
    {browser name} = 'firefox' .?
        Use browser .?

* Open Safari
    {browser name} = 'safari' .?
        Use browser .?

* Open IE
    {browser name} = 'internet explorer' .?
        Use browser .?

* Open Edge
    {browser name} = 'MicrosoftEdge' .?
        Use browser .?

* Use browser {{name}}
    {browser name} = '{{name}}' .?
        Use browser .?

// ***************************************
//  Browser-dependent functions
// ***************************************

// Note: functions under Use browser are indented because they're only available after a Use browser call

* Use browser {
    let SeleniumBrowser = i('SeleniumBrowser', './packages/js/selenium-browser.js');
    let browser = g('browser', new SeleniumBrowser(runInstance));
    let name = g('browser name');

    if(name) {
        await browser.open({name: name});
    }

    g('$', browser.element);
    g('$$', browser.elements);
}

    // ***************************************
    //  Hooks
    // ***************************************

    *** After Every Branch {
        if(typeof browser != 'undefined') {
            await browser.close();
        }
    }

    *** Before Every Step {
        // Take screenshot, set runInstance.currStep.htmlReport






    }

    *** After Every Step {
        // Take screenshot, set runInstance.currStep.htmlReport (which already exists - just add to it)







    }

    // ***************************************
    //  Window
    // ***************************************

    * Set dimensions to width={{x}} height={{y}} {





    }

    * Maximize window {






    }

    // ***************************************
    //  Actions
    // ***************************************

    * Navigate to {{url}} {
        browser.nav(url);
    }

    * Click {{element}} {
        // element is an ElementFinder





    }

    * Double click {{element}} {





    }

    * Hover over {{element}} {





    }

    * Touch {{element}} {





    }

    * Scroll to {{element}} {





    }

    * Get cookie {{name}} {





    }

    * Set cookie {{name}} to {{value}} {
        // value can include expiration, etc.




    }

    * Delete cookie {{name}} {





    }

    * Delete all cookies {






    }

    * Clear local storage {





    }

    * Clear cache and cookies {
        // including local storage





    }

    * Go Back {





    }

    * Go Forward {





    }

    * Refresh {






    }

    * Type {{text}} into {{element}} {
        // sendkeys, you can also use unicode codes for special keys like arrows (represented as "[enter]", etc.)
        /*
        - Enter '[nothing]', Select '[nothing]', etc. just does nothing, without an error
            - This allows you to Enter, Select, etc. a variable, that can sometimes be set to [nothing] to signify ignoring this form field
            - Make sure you can escape using \[nothing\]. Same thing with keys like [enter].
        */







    }

    * Set {{element}} to {{value}} {
        // can be textbox, dropdown, etc. (anything with a value)
        // support [nothing]





    }

    * Check {{element}} {
        // checkboxes or radio






    }

    * Uncheck {{element}} {
        // checkboxes or radio





    }

    * Select {{value}} from {{element}} {
        // dropdown, where value is exact text, or nearest text with a warning logged (via log())
        // support [nothing]





    }

    * Current url {
        // return current absolute url





    }

    * Window title {
        // returns window title





    }

    * Value of {{element}} {
        // returns value of element





    }

    * New tab {







    }

    * Switch to tab with title {{text}} {
        // window title contains given text





    }

    * Switch to tab with url {{url}} {
        // search for full url, then do partial matches






    }

    * Switch to the {{nth}} tab {
        // nth in an actual ordinal (strip out the number from this string)





    }

    * Switch to iframe {{element}} {
        // element is an ElementFinder of an iframe





    }

    * Switch to original iframe {
        // parentFrame aka defaultContent





    }

    * Execute in browser {{code}} {




    }

    // ***************************************
    //  Network conditions and throttling (Chrome only)
    // ***************************************

    * Offline {
        // ChromeDriver only (throw error if not Chrome). driver.setNetworkConditions()



    }

    * Online {
        // ChromeDriver only (throw error if not Chrome). driver.setNetworkConditions()



    }

    * Network latency of {{n}} ms {
        // ChromeDriver only (throw error if not Chrome). driver.setNetworkConditions()



    }

    * No network latency {
        // ChromeDriver only (throw error if not Chrome). driver.setNetworkConditions()



    }

    * Maximum download speed of {{n}} Kbps {
        // ChromeDriver only (throw error if not Chrome). driver.setNetworkConditions()



    }

    * No maximum download speed {
        // ChromeDriver only (throw error if not Chrome). driver.setNetworkConditions()



    }

    * Maximum upload speed of {{n}} Kbps {
        // ChromeDriver only (throw error if not Chrome). driver.setNetworkConditions()



    }

    * No maximum upload speed {
        // ChromeDriver only (throw error if not Chrome). driver.setNetworkConditions()



    }

    // TODO: Alert-related functions

    * Wait {{n}} second
        Wait {{n}} seconds .?

    * Wait {{n}} seconds {
        return new Promise(res => setTimeout(res, n * 1000));
    }

    // ***************************************
    //  Geolocation spoofing
    // ***************************************

    * Location is latitude={{latitude}} longitude={{longitude}} {
        // TODO: https://stackoverflow.com/questions/8411816/how-do-i-enable-geolocation-support-in-chromedriver



    }

    // ***************************************
    //  Mock
    // ***************************************

    * Mock GET {{url}} {

    }

    * Mock HEAD {{url}} {

    }

    * Mock POST {{url}} {

    }

    * Mock PUT {{url}} {

    }

    * Mock DELETE {{url}} {

    }

    * Mock CONNECT {{url}} {

    }

    * Mock OPTIONS {{url}} {

    }

    * Mock TRACE {{url}} {

    }

    * Mock PATCH {{url}} {

    }

    * Mock time to {{datetime}} {

    }

    * Stop all mocks {
        // restores original xhr
    }

    // ***************************************
    //  Verify
    // ***************************************

    * Verify at page {{page}} {
        // page is page title or url (absolute or relative)
        // do a partial match
        // wait for up to 3 secs?
        // error.continue = true





    }

    * Verify cookie {{name}} contains {{value}} {





    }

    * Verify page contains {{element}} {






    }

    * Verify page does not contain {{element}} {






    }

    // ***************************************
    //  Wait until
    // ***************************************

    * Wait until at page {{titleOrUrl}} {
        // wait up to 15 secs




    }

    * Wait up to {{n}} secs until at page {{titleOrUrl}} {





    }

    * Wait until cookie {{name}} contains {{value}} {




    }

    * Wait up to {{n}} secs until cookie {{name}} contains {{value}} {




    }

    * Wait until page contains {{element}} {





    }

    * Wait up to {{n}} secs until page contains {{content}} {





    }

    * Wait until page does not contain {{element}} {





    }

    * Wait up to {{n}} secs until page does not contain {{content}} {





    }

    // ***************************************
    //  Misc
    // ***************************************

    * Log {{text}} {
        log(runInstance.replaceVars(text);
    }
