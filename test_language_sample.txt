* Initialize
    Must test All Browsers *, All Envs *, All Devices *
        {Run at or above frequency} = 'medium'


* QA Env
    {host}='qa.site.com', {group}='qa'

* Stage Env
    {host}='stage.site.com', {group}='stage'

* Prod Env
    ..
    {host} = 'site.com'
    {group}='prod'


* Chrome
* IE
    {version}=11
* Firefox


* Desktop
    {viewport}=1400
* Mobile
    {viewport}=500


* Verify at homepage

    {Login box}='.loginbox',
    {Password box}='.password'

        Verify 'Welcome to homepage' is visible

            Verify {Login box} contains 'Login here'


* Some function {
    js to execute in node webdriverio running this test goes here
    return X; // used when you want to do {var} = Some function *
}

* Verify {response} has {num} {
    if(JSON.parse(response).key != num)
        throw new Error();     // if exception is thrown, step fails
}



Test the Widget Maker
    Initialize *

        QA Env *
        Stage Env *
        Prod Env *

            Chrome *      // opens latest version of Chrome
            IE *
            Firefox *

                Desktop *
                Mobile *

                    Navigate to homepage at {host}
                        Verify at homepage *
                            Enter {username} into {Login box}     // If var isn't set yet, execute this line when it is set below

                                {username}='one'
                                    Special case for username of one
                                        Click {Login box}

                                {username}=two
                                {username}=fuzz *

                                    Enter {password} into {Password box}

                                        {password}=one
                                        {password}=two
                                        {password}=fuzz *

                                            Click {'Login' button}      // ElementFinder

                                                Get MFA code sent via SMS
                                                    {mfacode} = Get SMS code *

                                                        Enter {mfacode} into {MFA Code box} ~   // ~ tells the commandline interpreter to run a new selenium browser to this branch, then stop here

        						                            Execute in browser {js goes here}

                                                                Some function *

                                                                    Verify 'something' inside of {some box} - #     // Add # to end of step to indicate it’s supposed to fail here. If fails, doesn’t complain about it. If passes, notifies you nicely.

                                            Manual step -MANUAL    // treated as an empty texual step and skipped test (assuming not signed off in txt file), but you can ask to generate a manual checklist from the commandline and it will list this

                                            Pen test url-here-with-inputs-marked        // also _currentUrl variable always set to the current url
                                                {group}='pedantic'

                    Navigate to about page at url {host}/about

                        Verify at page '/about'
                        Verify page title is 'About page' -TODO

        			Use mock 'blah'      // SmashMOCK integration

                    Call API GET {host}/something

                        Verify {response} has 6 *

                    * After every branch  // called at the end of every branch from this step's siblings on down, also tests for "Before every branch", "Before every step", "After every step", "Before all branches" (before all siblings), "After all branches", "After failed step", and "After successful step"

                        Do cleanup




* fuzz
    a
    b
    c
    securityFuzz *
    stringBoundaryFuzz *
    sizeFuzz *

* Verify at Welcome page, set {meow} to what's sent back       // this is like a function, vars set above this function call will be accessible inside

    Verify at page '{host}/welcome'

        Verify page title is 'Welcome {var}'

            Verify 'Welcome text' visible

                Wait 2 seconds

                    Wait until 'something' visible

                        Wait until {big button} is visible
                            {big button}='.bigbutton'

                                {purr}=blah   // this variable is accessible outside the function, but will be overridden if a variable of the same name is used in the caller

                                    {meow}=something  // if a variable was passed in at {meow} by the caller, that variable will be set to something (since {meow} is in the function name)


* Click the button {number} times  {       // executes in the context of the webdriverio nodejs, all vars/functions in one {} are accessible by all other {}'s, actually maybe implement all basic steps this way
    for(var i = 0; i < number; i++)
        select('.button').click();
}


{all-pairs}=true     // only execute branches chosen by allpairs algo, where you have nested blocks of 2 or more like with browsers (this var is usually set from the commandline, where any vars can be set at the highest level)

{run-groups}=['bvt','pedantic']    // which group(s) to run, usually set from commandline




* All Browsers

    Chrome
    FF
    IE

        Desktop
        Mobile

All Browsers *    // functions work by copying the * function and replacing it here. Therefore, both tests will execute for all 3 browsers x 2 viewports

    Test A

    Test B

Must test All Browsers *    // If Browsers isn't a subtree under this step, there will be a compile error. In other words, we add a new browser to the list, the tester will be forced to add it here too. If something like {n-wise}=X is set, only verify that each tuple of X is present

    FF
        Desktop
        Mobile

    Chrome
        Something
            Desktop
                Test
        Mobile

    Safari

    IE

        Mobile
            Incomplete

        Desktop
            Click back button

Must test All Browsers *, All Devices *, All Viewports *     // combining of multiple Must test statements into one




* Test accessibility on Register page

    Verify on Register page *

        {username} = "testAccount1" +         // + sign means no two branches below me may execute simultaneously, usually placed at a "shared resource" (e.g., username)

            Action 1

            Action 2

    Navigate to register page ..        // .. means execute branches below me depth-first sequentially, but never repeat the execution of a parent step (including me) more than once.  ..'es have the effect of flattening themselves and their children into one long list of sequentially indented steps, a .. does not expand beyond the bounds of a *function

        Enter invalid username 1
        Enter invalid username 2
        Enter invalid username 3

            Verify error

    ..              // .. right above a step block executes the step block sequentially, but under it it goes back to normal branched execution
    Something 1
    Something 2
    Something 3

        Verify error

    Accessibility testing

        Arrow up inside {dropdown} ..

            {dropdown} = List of dropdowns on Register page *     // .. applies to children and called functions as well (in this case, each dropdown= that will result), great for taking a matrix and converting into sequential (indented) items

        Some func *

            Some step 1       // even if Some func has a .. inside, Some step 1 and 2 will still be treated as different branches
            Some step 2



Open Chrome, call it browser 'A'

    Open Chrome, call it browser 'B'

        Navigate to X, in browser 'B'

            Navigate to Y, in browser 'A'
