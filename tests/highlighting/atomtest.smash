Function here
    Function here   // comment here
        Textual step 'non // comment string' -
            // comment on its own line

            Manual step -M // comment
                Stuff under the manual step
                    More stuff under manual .. ~

            To-Do step -T
                Stuff under the to-do step...
                    More stuff under to-do step .. ~

            Skipped step -S
                Other stuff -

            Step block one -
            Step block two -
            Step block three -

                Under step block -

            ..
            Sequential step block one -
            Sequential step block two -
            Sequential step block three -

                Under step block -

                ..
                Sequential step block one -
                Sequential step block two -
                Sequential step block three -
                    Not sequential block -

                    ..
                    Sequential step block one -
                    Sequential step block two -
                    Sequential step block three -
                Not sequential block -

                        ..
                        Sequential step block one -
                        Sequential step block two -
                        Sequential step block three -

                    Not sequential block -

                            ..
                            Sequential step block one -
                            Sequential step block two -
                                ..
                                Sequential step block one -
                                Sequential step block two -
                                    Not sequential -

.. Sequential step 'string' - //comment
    Sequential one -
        Sequential two -
    Sequential three -
Not sequential

    Sequential step 'string' .. - //comment
        Sequential one -
            Sequential two -
        Sequential three -
    Not sequential

        Sequential step 'string' .. - //comment

            Sequential one -

                Sequential two -

            Sequential three -

        Not sequential

            Sequential step 'string' .. - //comment
                Sequential one -
                    Sequential two -
                Sequential three -
            Not sequential

            Sequential and debug ~ ..

            $ IsOnly step -
                IsOnly step $ -
                    ~ Debug step // comment
                        Debug step + ~ - //comment

                ~ Debug code {var} {var2:} 'string' block {
                }
                    Debug code block ~ {
                    }
                        Non-debug ~ step

            - + .? Identifiers.?- - + .?

            Step with \\ special \" chars "string \" " {"var"}

            Code block {
                throw new Error("oops");
                if(something) {
                    something();
                }
                return 6;
            }

            String payload block [
                String
                String \" \' \\
                {var}
                {{var}}
                [
                    something
                    {var}
                    [] [] []
                ]
                [
                    fsdfdsf
                ]
            ]

            Code payload block [{
                 let x = 7;
                 return new Error();
                 throw new Error("oops");
                 if(something) {
                     something();
                 }
                 return 6;
            }]

                $ Code block ~ {
                    throw new Error("oops");
                    if(something) {
                        something();
                    }
                    return 6;
                }

                $ String payload block ~ .. - [
                    String
                    String \" \' \\
                    {var}
                    {{var}}
                    [
                        something
                        {var}
                        [] [] []
                    ]
                    [
                        fsdfdsf
                    ]
                ]

                $ Code payload block ~ - [{
                     let x = 7;
                     return new Error();
                     throw new Error("oops");
                     if(something) {
                         something();
                     }
                     return 6;
                }]

                    .. Code block {
                        throw new Error("oops");
                        if(something) {
                            something();
                        }
                        return 6;
                    }

                    String payload block .. [
                        String
                        String \" \' \\
                        {var}
                        {{var}}
                        [
                            something
                            {var}
                            [] [] []
                        ]
                        [
                            fsdfdsf
                        ]
                    ]

                    Code payload block .. - [{
                         let x = 7;
                         return new Error();
                         throw new Error("oops");
                         if(something) {
                             something();
                         }
                         return 6;
                    }]

* Function here
    {global var}='something'
        {{local var}}="something else here {var} {var:}", {{local var2}} = "something {var inside string}"
            {var} = [ 1st 'Login' box near 'title' {var} ]
                {escaping} = outside 'single\'\\\'quote\n' outside "double\"quote\\\"" outside [ "element\"" 'finder\'' \] ] outside
                    {escaping}=outside 'something' outside 'something else' outside
                        {escaping}=outside "something" outside "something else" outside
                            {escaping}=outside [something] outside [something else] outside
                                {lookahead var:} {{{var in squigglies}}} {a} {}

* Other function {{var}} 'string' {
    // code block
    let x = 5 + 5;
    setTimeout(() => {
        console.log("something");
    }, 1000);

    return new Object();
}

.. * Func - .?

$ .. * Func - .?

- .? * Func - .?

*** Before every branch {
    throw new Error("oops");
}

*** AFTER every Branch {
    throw new Error("oops");
}

*** Before  every  step {
    throw new Error("oops");
}

    *** After every step {
        throw new Error("oops");
    }

*** Before Everything  {
    throw new Error("oops");
}

*** After Everything {
    throw new Error("oops");
}

*** Invalid hook name {
    throw new Error("oops");
}
