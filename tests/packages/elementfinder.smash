- getAll()

    open chrome
    open firefox

        open test page +

            - normal EFs

                - one line

                    - text

                        - matches innerText

                            create html page {
                                await setPageBody(`
                                    <div id="one">foobar</div>
                                    <div id="two">
                                        <div id="three">
                                            foo bar
                                        </div>
                                    </div>
                                    <div id="four">
                                        buzz
                                    </div>
                                `);
                            }

                                finds one element {
                                    let ef = new ElementFinder(`'foo'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getTagName()).to.equal('html');
                                }

                                finds all elements {
                                    let ef = new ElementFinder(`1+ x 'foo'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(5);
                                    expect(await results.matches[0].getTagName()).to.equal('html');
                                    expect(await results.matches[1].getTagName()).to.equal('body');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[4].getAttribute('id')).to.equal('three');
                                }

                        - matches innerText, where the matching text is of a different case and has differing whitespace

                            create html page {
                                await setPageBody(`
                                    <div id="one"> BARFOO  BARFOO </div>
                                    <div id="two">
                                        <div id="three">
                                            FoO   Bar
                                        </div>
                                    </div>
                                    <div id="four">
                                        buzz
                                    </div>
                                `);
                            }

                                finds one element {
                                    let ef = new ElementFinder(`' foo  bar '`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getTagName()).to.equal('html');
                                }

                                finds all elements {
                                    let ef = new ElementFinder(`1+ x ' foo  bar '`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(5);
                                    expect(await results.matches[0].getTagName()).to.equal('html');
                                    expect(await results.matches[1].getTagName()).to.equal('body');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[4].getAttribute('id')).to.equal('three');
                                }

                        - matches value

                            - matches by attribute value

                                create html page {
                                    await setPageBody(`
                                        <input id="one" type="text" value="foobar">
                                        <div id="wrong">buzz</div>
                                    `);
                                }

                                    finds element {
                                        let ef = new ElementFinder(`'foobar'`);
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                            - matches by js-set value

                                create html page {
                                    await setPageBody(`
                                        <input id="one" type="text">
                                        <div id="wrong">buzz</div>
                                    `);

                                    await browser.executeScript(function() {
                                        document.getElementById("one").value = "foobar";
                                    });
                                }

                                    finds element {
                                        let ef = new ElementFinder(`'foobar'`);
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                        - matches placeholder

                            create html page {
                                await setPageBody(`
                                    <input id="one" type="text" placeholder="foobar">
                                    <div id="wrong">buzz</div>
                                `);
                            }

                                finds element {
                                    let ef = new ElementFinder(`'foobar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                        - matches an associated label's innerText

                            create html page {
                                await setPageBody(`
                                    <div id="one">Something</div>
                                    <label for="wrong">buzz label</label>
                                    <label for="one">foobar2</label>
                                    <div id="wrong">buzz</div>
                                `);
                            }

                                finds one element {
                                    let ef = new ElementFinder(`'foobar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getTagName()).to.equal('html');
                                }

                                finds all elements {
                                    let ef = new ElementFinder(`1+ x 'foobar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(4);
                                    expect(await results.matches[0].getTagName()).to.equal('html');
                                    expect(await results.matches[1].getTagName()).to.equal('body');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[3].getAttribute('for')).to.equal('one');
                                }

                        - matches text that spans multiple elements

                            create html page {
                                await setPageBody(`
                                    <div id="one">
                                        <div id="two">
                                            foo
                                        </div>
                                        <div id="three">
                                            bar
                                        </div>
                                    </div>
                                    <div id="wrong">buzz</div>
                                `);
                            }

                                finds one element {
                                    let ef = new ElementFinder(`'foo bar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getTagName()).to.equal('html');
                                }

                                finds all elements {
                                    let ef = new ElementFinder(`1+ x 'foo bar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getTagName()).to.equal('html');
                                    expect(await results.matches[1].getTagName()).to.equal('body');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                }

                        - doesn't find elements

                            create html page {
                                await setPageBody(`
                                    <div id="wrong">buzz</div>
                                `);
                            }

                                doesn't find elements {
                                    let ef = new ElementFinder(`'foobar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(`'foobar'  -->  not found (zero matches after \`'foobar'\` applied)`);
                                }

                    - defined prop

                        * create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);
                        }

                            * finds one element {
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                            }

                            * finds all elements {
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                expect(await results.matches[1].getAttribute('id')).to.equal('three');
                            }

                            * doesn't find elements {
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`tiny  -->  not found (zero matches after \`tiny\` applied)`);
                            }

                        create html page

                            - prop is an EF

                                - one EF

                                    create defined props {
                                        let definedProps = ElementFinder.defaultProps();
                                        definedProps.big = [ new ElementFinder(`selector '.big'`, definedProps) ];
                                        definedProps.tiny = [ new ElementFinder(`selector '.tiny'`, definedProps) ];

                                        g('definedProps', definedProps);
                                    }

                                        try to find one element {
                                            g('ef', new ElementFinder(`big`, definedProps));
                                        }

                                            finds one element

                                        try to find all elements {
                                            g('ef', new ElementFinder(`1+ x big`, definedProps));
                                        }

                                            finds all elements

                                        try to not find any elements {
                                            g('ef', new ElementFinder(`tiny`, definedProps));
                                        }

                                            doesn't find elements

                                - EF referenced by an EF

                                    create defined props {
                                        let definedProps = ElementFinder.defaultProps();
                                        definedProps.big = [ new ElementFinder(`selector '.big'`, definedProps) ];
                                        definedProps.bigger = [ new ElementFinder(`big`, definedProps) ];

                                        g('definedProps', definedProps);
                                    }

                                        try to find all elements {
                                            g('ef', new ElementFinder(`1+ x bigger`, definedProps));
                                        }

                                            finds all elements

                                - EF referenced by an EF referenced by an EF

                                    create defined props {
                                        let definedProps = ElementFinder.defaultProps();
                                        definedProps.big = [ new ElementFinder(`selector '.big'`, definedProps) ];
                                        definedProps.bigger = [ new ElementFinder(`big`, definedProps) ];
                                        definedProps.biggest = [ new ElementFinder(`bigger`, definedProps) ];

                                        g('definedProps', definedProps);
                                    }

                                        try to find all elements {
                                            g('ef', new ElementFinder(`1+ x biggest`, definedProps));
                                        }

                                            finds all elements

                            - prop is a function

                                create defined props {
                                    let definedProps = ElementFinder.defaultProps();
                                    definedProps.big = [ function(elems, input) {
                                        return elems.filter(function(elem) {
                                            return elem.className == 'big';
                                        });
                                    } ]

                                    g('definedProps', definedProps);
                                }

                                    try to find one element {
                                        g('ef', new ElementFinder(`big`, definedProps));
                                    }

                                        finds one element

                                    try to find all elements {
                                        g('ef', new ElementFinder(`1+ x big`, definedProps));
                                    }

                                        finds all elements

                                    try to not find any elements {
                                        g('ef', new ElementFinder(`tiny`, definedProps));
                                    }

                                        doesn't find elements

                            - prop is a function with input

                                create defined props {
                                    let definedProps = ElementFinder.defaultProps();
                                    definedProps['look for it'] = [ function(elems, input) {
                                        return elems.filter(function(elem) {
                                            return elem.className == input;
                                        });
                                    } ]

                                    g('definedProps', definedProps);
                                }

                                    try to find one element {
                                        g('ef', new ElementFinder(`look for it 'big'`, definedProps));
                                    }

                                        finds one element

                                    try to find all elements {
                                        g('ef', new ElementFinder(`1+ x look for it 'big'`, definedProps));
                                    }

                                        finds all elements

                                    try to not find any elements {
                                        g('ef', new ElementFinder(`look for it 'tiny'`, definedProps));
                                    }

                                        doesn't find elements {
                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(`look for it 'tiny'  -->  not found (zero matches after \`look for it 'tiny'\` applied)`);
                                        }

                            - multiple definitions in one prop

                                create defined props {
                                    let definedProps = ElementFinder.defaultProps();
                                    definedProps.big = [
                                        new ElementFinder(`#three`, definedProps),
                                        new ElementFinder(`#three`, definedProps),
                                        function(elems, input) {
                                            return elems.filter(function(elem) {
                                                return elem.id == 'two';
                                            });
                                        }
                                    ];
                                    definedProps.tiny = [
                                        new ElementFinder(`#tiny`, definedProps),
                                        function(elems, input) {
                                            return elems.filter(function(elem) {
                                                return elem.id == 'tiny';
                                            });
                                        }
                                    ];

                                    g('definedProps', definedProps);
                                }

                                    try to find one element {
                                        g('ef', new ElementFinder(`big`, definedProps));
                                    }

                                        finds one element

                                    try to find all elements {
                                        g('ef', new ElementFinder(`1+ x big`, definedProps));
                                    }

                                        finds all elements

                                    try to not find any elements {
                                        g('ef', new ElementFinder(`tiny`, definedProps));
                                    }

                                        doesn't find elements

                            - handles the 'not' keyword

                                - prop has one definition

                                - prop has multiple definitions

                                    create defined props {
                                        let definedProps = ElementFinder.defaultProps();
                                        definedProps.big = [
                                            new ElementFinder(`#three`, definedProps),
                                            new ElementFinder(`#three`, definedProps),
                                            function(elems, input) {
                                                return elems.filter(function(elem) {
                                                    return elem.id == 'two';
                                                });
                                            }
                                        ];
                                        definedProps.all = [ // matches everything
                                            new ElementFinder(`selector '*'`, definedProps),
                                            function(elems, input) {
                                                return elems;
                                            }
                                        ];

                                        g('definedProps', definedProps);
                                    }

                                        try to find one element {
                                            g('ef', new ElementFinder(`not big`, definedProps));
                                        }

                                            finds one element {
                                                let results = await ef.getAll(browser.driver);
                                                results.ef = ElementFinder.parseObj(results.ef);

                                                expect(results.ef.hasErrors()).to.be.false;
                                                expect(results.matches).to.have.lengthOf(1);
                                                expect(await results.matches[0].getTagName()).to.equal('html');
                                            }

                                        try to find all elements {
                                            g('ef', new ElementFinder(`1+ x not big`, definedProps));
                                        }

                                            finds all elements {
                                                let results = await ef.getAll(browser.driver);
                                                results.ef = ElementFinder.parseObj(results.ef);

                                                expect(results.ef.hasErrors()).to.be.false;
                                                expect(results.matches).to.have.lengthOf(4);
                                                expect(await results.matches[0].getTagName()).to.equal('html');
                                                expect(await results.matches[1].getTagName()).to.equal('body');
                                                expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                                expect(await results.matches[3].getAttribute('id')).to.equal('four');
                                            }

                                        try to not find any elements {
                                            g('ef', new ElementFinder(`not all`, definedProps));
                                        }

                                            doesn't find elements {
                                                let results = await ef.getAll(browser.driver);
                                                results.ef = ElementFinder.parseObj(results.ef);

                                                expect(results.ef.hasErrors()).to.be.true;
                                                expect(results.matches).to.have.lengthOf(0);
                                                expect(results.ef.print()).to.equal(`not all  -->  not found (zero matches after \`not all\` applied)`);
                                            }

                    - selector

                        create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);
                        }

                            finds one element {
                                let ef = new ElementFinder(`div.big`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                            }

                            finds all elements {
                                let ef = new ElementFinder(`1+ x div.big`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                expect(await results.matches[1].getAttribute('id')).to.equal('three');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(`div.tiny`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`div.tiny  -->  not found (zero matches after \`div.tiny\` applied)`);
                            }

                    - ord

                        create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);
                        }

                            finds one element {
                                let ef = new ElementFinder(`div, 3rd`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('three');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(`div, 5th`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`div, 5th  -->  not found (zero matches after \`5th\` applied)`);
                            }

                    - counter

                        - counter with a min only

                            min == 0 {
                                g('ef', new ElementFinder(`0- x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, no errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(0);
                                    }

                                multiple matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                            min > 0 {
                                g('ef', new ElementFinder(`2- x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`2- x .big  -->  not found (zero matches after \`.big\` applied)`);
                                    }

                                < min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`2- x .big  -->  only found 1`);
                                    }

                                min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                                > min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                        - counter with a min and max

                            min and max == 0 {
                                g('ef', new ElementFinder(`0 x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, no errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(0);
                                    }

                                multiple matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, no errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(0);
                                    }

                            min == 0, max > 0 {
                                g('ef', new ElementFinder(`0-2 x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, no errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(0);
                                    }

                                < max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                    }

                                max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                                > max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                            min < max {
                                g('ef', new ElementFinder(`2-4 x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`2-4 x .big  -->  not found (zero matches after \`.big\` applied)`);
                                    }

                                < min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`2-4 x .big  -->  only found 1`);
                                    }

                                min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                                min-max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                                max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="big">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(4);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[3].getAttribute('id')).to.equal('four');
                                    }

                                > max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="big">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                        <div id="five" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(4);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[3].getAttribute('id')).to.equal('four');
                                    }

                            min == max {
                                g('ef', new ElementFinder(`3 x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`3 x .big  -->  not found (zero matches after \`.big\` applied)`);
                                    }

                                < min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`3 x .big  -->  only found 2`);
                                    }

                                min-max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                                > max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="big">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('three');
                                    }

                    - match me

                        normal {
                            g('ef', new ElementFinder(`[.big]`));
                        }

                            0 matching elements exist {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="small">foobar</div>
                                    <div id="three" class="small">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                doesn't find elements {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(`[.big]  -->  not found (zero matches after \`.big\` applied)`);
                                }

                            1 matching element exists {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="big">foobar</div>
                                    <div id="three" class="small">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                finds elements {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                }

                            multiple matching elements exist {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="big">foobar</div>
                                    <div id="three" class="big">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                finds elements {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                }

                        - counter x match me

                            counter inside match me {
                                g('ef', new ElementFinder(`[2 x .big]`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`[2 x .big]  -->  not found (zero matches after \`.big\` applied)`);
                                    }

                                < min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`[2 x .big]  -->  only found 1`);
                                    }

                                > min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                            counter outside match me {
                                g('ef', new ElementFinder(`2 x [.big]`));
                            }

                                doesn't find elements, since it's a bad selector {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(`2 x [.big]  -->  not found (zero matches after \`[.big]\` applied)`);
                                }

                        match me element array {
                            g('ef', new ElementFinder(`* [.big]`));
                        }

                            0 matching elements exist {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="small">foobar</div>
                                    <div id="three" class="small">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                doesn't find elements, no errors {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(`* [.big]  -->  not found (zero matches after \`.big\` applied)`);
                                }

                            multiple matching elements exist, but are not matched by the element array {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="big">foobar</div>
                                    <div id="three" class="big">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                errors occur {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* [.big]
                                        |    --> missing
                                        |    div#two.big
                                        |
                                        |    --> missing
                                        |    div#three.big
                                        |`));
                                }

                    - multiple props

                        create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);
                        }

                            - 0 matching elements exist

                                0 matching elements after the first prop {
                                    g('ef', new ElementFinder(`.bad1, 'foobar', .bad2`));
                                }

                                    doesn't find elements, has error {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`.bad1, 'foobar', .bad2  -->  not found (zero matches after \`.bad1\` applied)`);
                                    }

                                0 matching elements after the second prop {
                                    g('ef', new ElementFinder(`'foobar', .bad1, .bad2`));
                                }

                                    doesn't find elements, has error {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`'foobar', .bad1, .bad2  -->  not found (zero matches after \`.bad1\` applied)`);
                                    }

                            matching elements exist {
                                g('ef', new ElementFinder(`.big, 'foobar', not .bad2, position '2'`));
                            }

                                finds elements {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('three');
                                }

                    - visible prop

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big" style="visibility: hidden">foobar</div>
                                <div id="two" class="big" style="display: none">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="big" style="opacity: 0">foobar</div>
                                <div id="five" class="big"></div>
                            `);
                        }

                            only finds visible elements by default {
                                let ef = new ElementFinder(`.big`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('three');
                            }

                            only finds visible elements when 'visible' prop used {
                                let ef = new ElementFinder(`.big, visible`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('three');
                            }

                            only finds non-visible elements when 'not visible' used {
                                let ef = new ElementFinder(`0+ x .big, not visible`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(4);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                expect(await results.matches[3].getAttribute('id')).to.equal('five');
                            }

                            finds all elements regardless of visibility if 'any visibility' is explicitly listed {
                                let ef = new ElementFinder(`0+ x .big, any visibility`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(5);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                expect(await results.matches[2].getAttribute('id')).to.equal('three');
                                expect(await results.matches[3].getAttribute('id')).to.equal('four');
                                expect(await results.matches[4].getAttribute('id')).to.equal('five');
                            }

                    - errors

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big">foobar</div>
                                <div id="two" class="small">foobar</div>
                                <div id="three" class="small">foobar</div>
                                <div id="four" class="big">foobar</div>
                            `);
                        }

                            includes an error if an element isn't found, and lists the prop after which 0 elements are matched {
                                let ef = new ElementFinder(`.foobar`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`.foobar  -->  not found (zero matches after \`.foobar\` applied)`);
                            }

                            includes an error if an element isn't found, where there are multiple props that bring the matches down to 0 {
                                let ef = new ElementFinder(`.big, .foobar`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`.big, .foobar  -->  not found (zero matches after \`.foobar\` applied)`);
                            }

                            includes an error if the number of elements found are less than the counter min {
                                let ef = new ElementFinder(`3 x .big`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`3 x .big  -->  only found 2`);
                            }

                            throws an error if an undefined prop is used {
                                assert.throws(() => {
                                    new ElementFinder(`div`, {});
                                }, `Cannot find property that matches \`selector\` [line:1]`);
                            }

                - one child

                    create html page {
                        await setPageBody(`
                            <div id="one" class="big">
                                <div id="two">foobar</div>
                                <div id="three">blah</div>
                                <div id="four">  FOOBAR </div>
                                <div id="five"></div>
                                <input id="eleven" type="checkbox" checked>
                            </div>
                            <div id="six" class="big">
                                <div id="seven">blah</div>
                                <div id="eight">foobar</div>
                                <input id="twelve" type="checkbox">
                            </div>
                            <div id="nine" class="small">
                                <div id="ten">foobar</div>
                                <input id="thirteen" type="checkbox" checked>
                            </div>
                            <input id="fourteen" type="checkbox" checked>
                        `);
                    }

                        - text on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    'foobar'
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x .big
                                    |    'foobar'
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    'nope'
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    'nope'`));
                            }

                        - defined prop on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    checked
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x selector '.big, .small'
                                    |    checked
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('nine');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    selected
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    selected`));
                            }

                        - selector on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    #eight
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('six');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x .big
                                    |    selector '#three, #eight'
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    .blah
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    .blah`));
                            }

                        - ord on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    3rd
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x .big
                                    |    3rd
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    10th
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    10th`));
                            }

                        - counter on child

                            - counter of 0

                                counter of 0 on a child makes child irrelevant {
                                    let ef = new ElementFinder(regularize(`
                                        |0+ x selector'.big,.small'
                                        |    0 x div
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('six');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('nine');
                                }

                                counter of 0+ on a child makes child irrelevant {
                                    let ef = new ElementFinder(regularize(`
                                        |0+ x selector'.big,.small'
                                        |    0+ x div
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('six');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('nine');
                                }

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    2 x div
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x .big
                                    |    2 x div
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    5 x div
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    5 x div`));
                            }

                        - match me on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    ['foobar']
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |1+ x .big
                                    |    [1+ x 'foobar']
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(3);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                expect(await results.matches[1].getAttribute('id')).to.equal('four');
                                expect(await results.matches[2].getAttribute('id')).to.equal('eight');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    ['nothing']
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    ['nothing']`));
                            }

                - one level of children

                    - generic tests

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big">
                                    <div id="two" class="sub1">foobar</div>
                                    <div id="three" class="sub2">foobar</div>
                                </div>
                                <div id="five" class="big">
                                    <div id="six" class="sub1">foobar</div>
                                    <div id="seven" class="sub2">foobar</div>
                                    <div id="eight" class="sub3">foobar</div>
                                </div>
                            `);
                        }

                            - parent matches once

                                - finds elements

                                    children always match {
                                        let ef = new ElementFinder(regularize(`
                                            |#five
                                            |    .sub1
                                            |    .sub2
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                    }

                                    children sometimes match {
                                        let ef = new ElementFinder(regularize(`
                                            |#five
                                            |    .sub1
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                    }

                                - doesn't find elements

                                    children never match {
                                        let ef = new ElementFinder(regularize(`
                                            |#five
                                            |    .sub1
                                            |    .sub4
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |#five  -->  found, but doesn't contain the right children (in the right order)
                                            |    .sub1
                                            |    .sub4  -->  not found (zero matches after \`.sub4\` applied)`));
                                    }

                            - parent matches multiple times

                                - finds elements

                                    children always match {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub1
                                            |    .sub2
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('five');
                                    }

                                    children sometimes match {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub1
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                    }

                                - doesn't find elements

                                    children never match {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub1
                                            |    .sub4
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |1+ x .big  -->  2 found, but none contain the right children (in the right order)
                                            |    .sub1
                                            |    .sub4`));
                                    }

                                    children are correct but in the wrong order {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub2
                                            |    .sub1
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |1+ x .big  -->  2 found, but none contain the right children (in the right order)
                                            |    .sub2
                                            |    .sub1`));
                                    }

                    - counter

                        - counter on parent

                            create html page {
                                await setPageBody(`
                                    <div id="1" class="big">
                                        <div id="1-1" class="sub1">foobar</div>
                                    </div>
                                    <div id="2" class="big">
                                        <div id="2-1" class="sub1">foobar</div>
                                        <div id="2-2" class="sub2">foobar</div>
                                    </div>
                                    <div id="3" class="big">
                                        <div id="3-1" class="sub1">foobar</div>
                                        <div id="3-2" class="sub2">foobar</div>
                                        <div id="3-3" class="sub3">foobar</div>
                                    </div>
                                    <div id="4" class="big">
                                        <div id="4-1" class="sub1">foobar</div>
                                        <div id="4-2" class="sub2">foobar</div>
                                        <div id="4-3" class="sub3">foobar</div>
                                        <div id="4-4" class="sub4">foobar</div>
                                    </div>
                                    <div id="5" class="big">
                                        <div id="5-1" class="sub1">foobar</div>
                                        <div id="5-2" class="sub2">foobar</div>
                                        <div id="5-3" class="sub3">foobar</div>
                                        <div id="5-4" class="sub4">foobar</div>
                                        <div id="5-5" class="sub5">foobar</div>
                                    </div>
                                `);
                            }

                                - finds elements

                                    counters allow correct matching {
                                        let ef = new ElementFinder(regularize(`
                                            |3 x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('5');
                                    }

                                    - counter of 0 is used

                                        matching elements exist {
                                            let ef = new ElementFinder(regularize(`
                                                |0 x .big
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.false;
                                            expect(results.matches).to.have.lengthOf(0);
                                        }

                                        matching elements don't exist {
                                            let ef = new ElementFinder(regularize(`
                                                |0 x .big
                                                |    .sub1
                                                |    .sub2
                                                |    .sub7
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.false;
                                            expect(results.matches).to.have.lengthOf(0);
                                        }

                                    counter of 0+ is used {
                                        let ef = new ElementFinder(regularize(`
                                            |0+ x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('5');
                                    }

                                    counter of 1+ is used {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('5');
                                    }

                                    number of elements are between the counter's min and max {
                                        let ef = new ElementFinder(regularize(`
                                            |1-2 x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                    }

                                    there are more elements than a counter's min, and no max exists {
                                        let ef = new ElementFinder(regularize(`
                                            |2- x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('5');
                                    }

                                    there are more elements than a counter's max {
                                        let ef = new ElementFinder(regularize(`
                                            |0-2 x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                    }

                                - doesn't find elements

                                    - there are fewer elements than a counter's min

                                        there are > 0 elements {
                                            let ef = new ElementFinder(regularize(`
                                                |3-4 x .big
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                                |    .sub4
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |3-4 x .big  -->  only found 2
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                                |    .sub4`));
                                        }

                                        there are 0 elements {
                                            let ef = new ElementFinder(regularize(`
                                                |1-2 x .big
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                                |    .sub5
                                                |    .sub4
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |1-2 x .big  -->  5 found, but none contain the right children (in the right order)
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                                |    .sub5
                                                |    .sub4`));
                                        }

                        - counter on child

                            create html page {
                                await setPageBody(`
                                    <div id="one" class="big">
                                        <div id="1" class="small">foobar</div>
                                        <div id="2" class="med">foobar</div>
                                        <div id="3" class="small">foobar</div>
                                        <div id="4" class="small">foobar</div>
                                        <div id="5" class="small">foobar</div>
                                    </div>
                                `);
                            }

                                - finds elements

                                    counter of '1+' {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    1+ x .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    number of elements are between the counter's min and max {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    2-4 x .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    there are more elements than a counter's min, and no max exists {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    2- x .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    there are more elements than a counter's max {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    1-2 x .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                - doesn't find elements

                                    - fewer elements than a counter's min

                                        0 elements exist {
                                            let ef = new ElementFinder(regularize(`
                                                |.big
                                                |    .med
                                                |    4 x .bad
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |.big  -->  found, but doesn't contain the right children (in the right order)
                                                |    .med
                                                |    4 x .bad  -->  not found (zero matches after \`.bad\` applied)`));
                                        }

                                        elements exist {
                                            let ef = new ElementFinder(regularize(`
                                                |.big
                                                |    .med
                                                |    4 x .small
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |.big  -->  found, but doesn't contain the right children (in the right order)
                                                |    .med
                                                |    4 x .small  -->  only found 3`));
                                        }

                        - counter on parent and child

                            create html page {
                                await setPageBody(`
                                    <div id="one" class="big">
                                        <div id="1" class="small">foobar</div>
                                        <div id="2" class="small">foobar</div>
                                        <div id="3" class="small">foobar</div>
                                    </div>
                                    <div id="two" class="big">
                                        <div id="4" class="small">foobar</div>
                                        <div id="5" class="small">foobar</div>
                                    </div>
                                `);
                            }

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2-5 x .big
                                        |    2+ x .small
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(2);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |3 x .big
                                        |    4 x .small
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |3 x .big  -->  2 found, but none contain the right children (in the right order)
                                        |    4 x .small`));
                                }

                    - keywords

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big">
                                    <div id="d1" class="small">foobar</div>
                                    <div id="d2" class="med">foobar</div>
                                    <div id="d3" class="small">foobar</div>
                                    <div id="d4" class="small">foobar</div>
                                    <div id="d5" class="small">foobar</div>
                                </div>
                                <div id="two" class="big">
                                    <div id="d1" class="small">foobar</div>
                                    <div id="d2" class="med">foobar</div>
                                    <div id="d3" class="small">foobar</div>
                                </div>
                            `);
                        }

                            - 'any order'

                                finds elements in a differing order with the 'any order' keyword {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    any order
                                        |    #d3
                                        |    #d2
                                        |    #d5
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                parent matches once, children don't match, even with the 'any order' keyword {
                                    let ef = new ElementFinder(regularize(`
                                        |.big, 2nd
                                        |    any order
                                        |    #d2
                                        |    #d4
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big, 2nd  -->  found, but doesn't contain the right children
                                        |    any order
                                        |    #d2
                                        |    #d4  -->  not found (zero matches after \`#d4\` applied)`));
                                }

                                parent matches multiple times, children don't match, even with the 'any order' keyword {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    any order
                                        |    #d2
                                        |    #d6
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big  -->  2 found, but none contain the right children
                                        |    any order
                                        |    #d2
                                        |    #d6`));
                                }

                                - counters and 'any order'

                                    finds elements {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    any order
                                            |    #d3
                                            |    3 x div
                                            |    #d5
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    doesn't find elements because of the counter {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    any order
                                            |    #d3
                                            |    4 x div
                                            |    #d5
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |.big  -->  2 found, but none contain the right children
                                            |    any order
                                            |    #d3
                                            |    4 x div
                                            |    #d5`));
                                    }

                            - 'subset'

                                finds elements with the 'subset' keyword, even though it doesn't do anything {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    subset
                                        |    #d1
                                        |    #d2
                                        |    #d3
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                - counters and 'subset'

                                    finds elements {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    subset
                                            |    #d1
                                            |    3 x div
                                            |    #d5
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    doesn't find elements because of the counter {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    subset
                                            |    #d3
                                            |    3 x div
                                            |    #d5
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |.big  -->  2 found, but none contain the right children (in the right order)
                                            |    subset
                                            |    #d3
                                            |    3 x div
                                            |    #d5`));
                                    }

                            - 'any order' and 'subset'

                                handles the 'any order' and 'subset' keywords together {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    subset
                                        |    any order
                                        |    #d1
                                        |    #d3
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                    - match me

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big">
                                    <div id="d1" class="small">foobar</div>
                                    <div id="d2" class="med">foobar</div>
                                    <div id="d3" class="small">foobar</div>
                                    <div id="d4" class="small">foobar</div>
                                    <div id="d5" class="small">foobar</div>
                                </div>
                                <div id="two" class="big">
                                    <div id="d6" class="small">foobar</div>
                                    <div id="d7" class="med">foobar</div>
                                    <div id="d8" class="small">foobar</div>
                                </div>
                            `);
                        }

                            - [match me] on the parent

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |[2 x .big]
                                        |    .small
                                        |    .med
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(2);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |[2 x .none]
                                        |    .small
                                        |    .med
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |[2 x .none]  -->  not found (zero matches after \`.none\` applied)
                                        |    .small
                                        |    .med`));
                                }

                            - [match me] on a child

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2 x .big
                                        |    .small
                                        |    [.med]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(2);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('d2');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('d7');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2 x .big
                                        |    .small
                                        |    [.none]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |2 x .big  -->  2 found, but none contain the right children (in the right order)
                                        |    .small
                                        |    [.none]`));
                                }

                            - [match me] on multiple children

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2 x .big
                                        |    [.small]
                                        |    [.med]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(4);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('d1');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('d6');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('d2');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('d7');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2 x .big
                                        |    [.small]
                                        |    [.none]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |2 x .big  -->  2 found, but none contain the right children (in the right order)
                                        |    [.small]
                                        |    [.none]`));
                                }

                            - [match me] on the parent and multiple children

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |[2 x .big]
                                        |    [.small]
                                        |    [.med]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(6);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('d1');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('d6');
                                    expect(await results.matches[4].getAttribute('id')).to.equal('d2');
                                    expect(await results.matches[5].getAttribute('id')).to.equal('d7');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |[2 x .big]
                                        |    [.small]
                                        |    [.none]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |[2 x .big]  -->  2 found, but none contain the right children (in the right order)
                                        |    [.small]
                                        |    [.none]`));
                                }

                            - [counter x child element]

                                - finds elements

                                    counter with just a min {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    [3 x .small]
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('d3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('d4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('d5');
                                    }

                                    counter with a min and max {
                                        let ef = new ElementFinder(regularize(`
                                            |0+ x .big
                                            |    .med
                                            |    [1-3 x .small]
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(4);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('d3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('d4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('d5');
                                        expect(await results.matches[3].getAttribute('id')).to.equal('d8');
                                    }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    .med
                                        |    [4 x .small]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big  -->  2 found, but none contain the right children (in the right order)
                                        |    .med
                                        |    [4 x .small]`));
                                }

                - multiple levels of children

                    create html page {
                        await setPageBody(`
                            <div id="one" class="big">
                                <div id="two" class="med">
                                    <div id="five" class="small">foobar</div>
                                    <div id="six" class="small">foobar</div>
                                    <div id="seven" class="small">foobar</div>
                                </div>
                                <div id="three" class="med">
                                    <div id="eight" class="small">foobar</div>
                                    <div id="nine" class="small">foobar</div>
                                    <div id="ten" class="small">foobar</div>
                                </div>
                                <div id="four" class="med">foobar</div>
                            </div>
                            <div id="two" class="big">
                                <div id="eleven" class="other">
                                    <div id="twelve" class="small">foobar</div>
                                </div>
                            </div>
                        `);
                    }

                        - generic tests

                            - parent matches, child matches

                                - finds elements

                                    grandchild always matches {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |        .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    grandchild sometimes matches {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |        #six
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    multiple grandchildren {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |        #six
                                            |    .med
                                            |        #nine
                                            |        #ten
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                - doesn't find elements

                                    grandchild never matches {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |        .none
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |.big  -->  2 found, but none contain the right children (in the right order)
                                            |    .med
                                            |        .none`));
                                    }

                                    multiple grandchildren {
                                        let ef = new ElementFinder(regularize(`
                                            |.big, 1st
                                            |    .med
                                            |        .small
                                            |    .med
                                            |        .none
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |.big, 1st  -->  found, but doesn't contain the right children (in the right order)
                                            |    .med
                                            |        .small
                                            |    .med  -->  2 found, but none contain the right children (in the right order)
                                            |        .none`));
                                    }

                        - counter

                            - handles multiple levels of counters

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |1-5 x .big
                                        |    2-5 x .med
                                        |        3-5 x .small
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |1-5 x .big
                                        |    2-5 x .med
                                        |        4-5 x .small
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |1-5 x .big  -->  2 found, but none contain the right children (in the right order)
                                        |    2-5 x .med
                                        |        4-5 x .small`));
                                }

                        - keywords

                            - handles multiple levels of 'subset' and 'any order'

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    any order
                                        |    .med
                                        |        any order
                                        |        subset
                                        |        #nine
                                        |        #eight
                                        |    .med
                                        |        subset
                                        |        #six
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    any order
                                        |    .med
                                        |        any order
                                        |        subset
                                        |        #nine
                                        |        #none
                                        |    .med
                                        |        subset
                                        |        #six
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big  -->  2 found, but none contain the right children
                                        |    any order
                                        |    .med
                                        |        any order
                                        |        subset
                                        |        #nine
                                        |        #none
                                        |    .med
                                        |        subset
                                        |        #six`));
                                }

                        - match me

                            []'s on multiple levels {
                                let ef = new ElementFinder(regularize(`
                                    |[.big]
                                    |    [.med]
                                    |        [#six]
                                    |    .med
                                    |        [#ten]
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(4);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                expect(await results.matches[2].getAttribute('id')).to.equal('six');
                                expect(await results.matches[3].getAttribute('id')).to.equal('ten');
                            }

                            []'s matches multiple elements when its parent matches multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    1+ x .med
                                    |        [1+ x .small]
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(6);
                                expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                                expect(await results.matches[2].getAttribute('id')).to.equal('seven');
                                expect(await results.matches[3].getAttribute('id')).to.equal('eight');
                                expect(await results.matches[4].getAttribute('id')).to.equal('nine');
                                expect(await results.matches[5].getAttribute('id')).to.equal('ten');
                            }

                            []'s matches multiple elements when its grandparent matches multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |1+ x .big
                                    |    1+ x div
                                    |        [1+ x .small]
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(7);
                                expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                                expect(await results.matches[2].getAttribute('id')).to.equal('seven');
                                expect(await results.matches[3].getAttribute('id')).to.equal('eight');
                                expect(await results.matches[4].getAttribute('id')).to.equal('nine');
                                expect(await results.matches[5].getAttribute('id')).to.equal('ten');
                                expect(await results.matches[6].getAttribute('id')).to.equal('twelve');
                            }

            - element array EFs

                - one line

                    $s empty element array {
                        let ef = new ElementFinder(`* something`);


                    }

                - one child

                    - element array on child

                        $s finds elements {

                        }

                        $s doesn't find elements {

                        }

                - one level of children

                    - element array on child

                        $s accepts a correct matching {

                        }

                        $s rejects an incorrect matching {
                            // child    --> doesn't match <tagname id="" class="">
                        }

                    - element array on parent

                        - accepts a correct matching

                            $s matching of 0 elements {

                            }

                            $s generic correct matching {

                            }

                            $s correct matching, even when the matched element type exists at different depths in the DOM, and with other elements in between {

                            }

                        - rejects an incorrect matching

                            $s too few elements listed {
                                // --> missing
                                // <tagname id="" class="">
                            }

                            $s too many elements listed {
                                // elements at the end   --> not found
                            }

                            $s the elements are correct but in the wrong order {

                            }

                            $s the elements listed don't match {

                            }

                    $s element array on parent and child {

                    }

                    - counter

                        - accepts a correct matching

                            $s counters allow correct matching {

                            }

                            $s counter of 1+ allows correct matching {

                            }

                            $s number of elements are between the counter's min and max {

                            }

                            $s there are more elements than a counter's min, and no max exists {

                            }

                            $s matches the most amount of elements allowed by the counter (greedy matching) {

                            }

                        - rejects an incorrect matching

                            $s there are more elements than a counter's max {

                            }

                            - there are fewer elements than a counter's min

                                $s 0 elements {

                                }

                                $s more than 0 elements {

                                }

                    - keywords

                        - any order

                            - accepts a correct matching

                                $s same order {

                                }

                                $s different order {

                                }

                            $s rejects an incorrect matching {

                            }

                        - subset

                            - accepts a correct matching

                                $s number of elements falls between the counter's min and max {

                                }

                                $s there are more elements than a counter's max {

                                }

                                - there are fewer elements than a counter's min

                                    $s 0 elements {

                                    }

                                    $s more than 0 elements {

                                    }

                            $s rejects an incorrect matching {

                            }

                        - any order and subset together

                            $s accepts a correct matching {

                            }

                            $s rejects an incorrect matching {

                            }

                    - match me

                        $s matches elements with [] on an element array parent {

                        }

                        $s matches elements with [] on an element array child {

                        }

                - multiple levels of children

                    - generic tests

                        $s element array with multiple levels of children {

                        }

                        $s nested element arrays on multiple levels of children {

                        }

                    - match me

                        $s matches elements with [] on an element array grandchild {

                        }

                        $s matches elements with [] on an element array grandchild, where the parent sometimes matches and sometimes doesn't {

                        }

                        $s matches elements with [] on multiple levels of an element array {

                        }

            - other

                $s only searches within the given parent element {

                }

                $s handles finding an iframe {

                }

                $s handles finding an svg {

                }

            - performance

                $s handles very large DOMs {

                }

                $s handles very large EFs {

                }

                $s handles finding a very large number of elements {

                }

* open test page

    inits {
        i('ElementFinder', '../../packages/js/elementfinder.js');
        i('Comparer', '../../packages/js/comparer.js');
        chai.use(i('chai-as-promised'));

        g('setPageBody', async (htmlStr) => {
            await browser.executeScript(function(htmlStr) {
                document.body.innerHTML = htmlStr;
            }, htmlStr);
        });

        g('regularize', (str) => {
            return str.replace(/\n\s*\|/g, '\n').replace(/^\s*\n/, '');
        });

        l(`test page location`, `file:///${dir()}/generic-page.html`);
    }

        navigate to {{test page location}}

- find() $s

    - isNot set to false

        - if multiple elements are found immediately

            - sends back all elements

            - if EF's counter never set

                - sends back the first matched element

        - if an element is found, but later on

            - sends back those elements as soon as they're found

        - if nothing is ever found

            - generic case

            - if timeout is 0

            - if timeout is omitted

            - if element appears after the timeout

                - throws an error

                    - sets error's continue properly

    - isNot set to true

        - if multiple elements are found immediately

            - if those elements disappear before the timeout

                - doesn't throw error

            - if those elements don't disappear before the timeout
            - if those elements disappear after the timeout

                - throws error

                    - sets error's continue properly

        - if nothing is ever found

            - because those elements never exist in the DOM

            - because those elements are never visible

                - doesn't throw error

- defaultProps() $s

    - visible
        - finds elements
        - doesn't find elements

    - not visible
        - finds elements
        - doesn't find elements

    - any visibility
        - finds elements
        - doesn't find elements

    - enabled
        - finds elements
        - doesn't find elements

    - disabled
        - finds elements
        - doesn't find elements

    - checked
        - finds elements
        - doesn't find elements

    - unchecked
        - finds elements
        - doesn't find elements

    - selected
        - finds elements
        - doesn't find elements

    - focused
        - finds elements
        - doesn't find elements

    - element
        - finds elements
        - doesn't find elements

    - clickable
        - finds elements
        - doesn't find elements

    - page title
        - finds elements
        - doesn't find elements

    - page title contains
        - finds elements
        - doesn't find elements

    - page url
        - relative
            - finds elements
            - doesn't find elements

        - absolute
            - finds elements
            - doesn't find elements

    - page url contains
        - finds elements
        - doesn't find elements

    - next to
        - finds the best element
        - finds multiple elements if there's a tie
        - doesn't find elements if the text doesn't exist on the page

    - value
        - finds elements
        - doesn't find elements

    - contains
        - finds elements
        - doesn't find elements

    - contains exact
        - finds elements
        - doesn't find elements

    - innertext
        - finds elements
        - doesn't find elements

    - selector
        - finds elements
        - doesn't find elements

    - xpath
        - finds elements
        - doesn't find elements

    - style
        - finds elements
        - doesn't find elements

    - position
        - finds elements
        - doesn't find elements
