Collapsing -
    A +

    * A ..
        A1 -
        A2 -
        B +
        A3 -

    * B ..
        B1 -
        B2 -
        C
        B3 -

    * C .. +
        C1 -
        C2 -
        C3 -

    Passing function 1 +
        Step after passing function -
            Passing function 1 +

    Passing function 2
        Step after passing function -
            Passing function 2

    Failing function +
        Step never gotten to -

    Function with multiple branches +

    Function with empty body +

    * Passing function 1
        Passing step 1 -
            Passing step 2 -

    * Passing function 2 +
        Passing step 1 -
            Passing step 2 -

    * Failing function
        Passing step -
            Failing step {
                throw new Error("oops2");
            }

    * Function with multiple branches +
        Branch 1 -
        Branch 2 -

    * Function with empty body




Passing -

    Passing step -

        Passing step -

    Step block step 1 -
    Step block step 2 -
    Step block step 3 -

        Passing step -



Failing -
    Passing step -
        Passing step -

            Failing step {
                throw new Error("oops");
            }

                Step never gotten to 1 -
                Step never gotten to 2 -



Function calls -
    Passing function
        Step after passing function -
            Passing function

    Failing function
        Step never gotten to -

    Function with multiple branches

    Function with empty body

    * Passing function
        Passing step -

    * Failing function
        Passing step -
            Failing step {
                throw new Error("oops2");
            }

    * Function with multiple branches
        Branch 1 -
        Branch 2 -

    * Function with empty body




Multiple levels of function calls -
    Function one

    * Function one
        ..
        - Step one
        Function two
        - Step two

    * Function two
        ..
        - Step three
        Function three
        - Step four

    * Function three
        ..
        - Step five
        - Step six
        - Step seven



Over 10 steps -
    ..
    Two -
    Three -
    Four -
    Five -
    Six -
    Seven -
    Eight -
    Nine -
    Ten -
    Eleven -



Very long step name word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word  -



Very long step name wordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordwordword -



Lots of function indents -
    * One
        * Two
            * Three
                * Four
                    * Five
                        * Six
                            * Seven
                                * Eight
                                    * Nine
                                        * Ten
                                            * Eleven

                                            Eleven
                                        Ten
                                    Nine
                                Eight
                            Seven
                        Six
                    Five
                Four
            Three
        Two
    One



Continue failed -
    Step that fails but continues {
        let e = new Error("oops");
        e.continue = true;
        throw e;
    }

        Step that fails and doesn't continue {
            throw new Error("oops 2");
        }

            We never get here -



Before Every Step Error -
    One -
        Two -

    *** Before Every Step {
        throw new Error("oops");
    }



After Every Step Error -
    One -
        Two -

    *** After Every Step {
        throw new Error("oops");
    }



Skipping similar branches on fail ! -

    Failing step {
        throw new Error("oops");
    }

        Branch one -
        Branch two will be skipped -
        Branch three will be skipped -



Skipping a skip below step - .s



Normal step -
    Skipping a SKIP step -s
        Normal step -



Skipping similar branches for skip below steps ! -

    Skip below step - .s

        Branch one will be run, but not including the skip below step above -
        Branch two will be skipped entirely -



Before Every Branch Error -
    One -
        Two -

    *** Before Every Branch {
        throw new Error("oops");
    }



After Every Branch Error -
    One -
        Two -

    *** After Every Branch {
        throw new Error("oops");
    }



Setting a step's details html {
    let readFiles = require('read-files-promise');
    
    let fileBuffers = await readFiles(['tests/reporter/sample-step-report.html'], {encoding: 'utf8'});
    runInstance.tree.reportTemplates = [ fileBuffers[0] ];
    runInstance.currStep.reportTemplateIndex = runInstance.tree.reportTemplates.length - 1;
    runInstance.currStep.reportView = {};

    throw new Error('oops');
}
